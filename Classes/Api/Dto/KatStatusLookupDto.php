<?php
/**
 * KatStatusLookupDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * KatStatusLookupDto Class Doc Comment
 *
 * @category    Class
 * @description Spezielles LookupDto für KatStatus.
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class KatStatusLookupDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'KatStatusLookupDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'is_selectable'                => 'bool',
        'ist_perfect_match_irrelevant' => 'bool',
        'bezeichnung'                  => 'string',
        'object_uuid'                  => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'is_selectable'                => null,
        'ist_perfect_match_irrelevant' => null,
        'bezeichnung'                  => null,
        'object_uuid'                  => 'uuid',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_selectable'                => 'IsSelectable',
        'ist_perfect_match_irrelevant' => 'IstPerfectMatchIrrelevant',
        'bezeichnung'                  => 'Bezeichnung',
        'object_uuid'                  => 'ObjectUuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_selectable'                => 'setIsSelectable',
        'ist_perfect_match_irrelevant' => 'setIstPerfectMatchIrrelevant',
        'bezeichnung'                  => 'setBezeichnung',
        'object_uuid'                  => 'setObjectUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_selectable'                => 'getIsSelectable',
        'ist_perfect_match_irrelevant' => 'getIstPerfectMatchIrrelevant',
        'bezeichnung'                  => 'getBezeichnung',
        'object_uuid'                  => 'getObjectUuid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_selectable'] = isset($data['is_selectable']) ? $data['is_selectable'] : null;
        $this->container['ist_perfect_match_irrelevant'] = isset($data['ist_perfect_match_irrelevant']) ? $data['ist_perfect_match_irrelevant'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['object_uuid'] = isset($data['object_uuid']) ? $data['object_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets is_selectable
     *
     * @return bool
     */
    public function getIsSelectable()
    {
        return $this->container['is_selectable'];
    }

    /**
     * Sets is_selectable
     *
     * @param bool $is_selectable Holt oder setzt den Wert, der angibt, ob der Status veraltet ist.
     *
     * @return $this
     */
    public function setIsSelectable($is_selectable)
    {
        $this->container['is_selectable'] = $is_selectable;

        return $this;
    }

    /**
     * Gets ist_perfect_match_irrelevant
     *
     * @return bool
     */
    public function getIstPerfectMatchIrrelevant()
    {
        return $this->container['ist_perfect_match_irrelevant'];
    }

    /**
     * Sets ist_perfect_match_irrelevant
     *
     * @param bool $ist_perfect_match_irrelevant Holt oder setzt einen Wert, der angibt, ob der Status für Perfect
     *                                           Match irrelevant ist.
     *
     * @return $this
     */
    public function setIstPerfectMatchIrrelevant($ist_perfect_match_irrelevant)
    {
        $this->container['ist_perfect_match_irrelevant'] = $ist_perfect_match_irrelevant;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Die Bezeichnung des Eintrags.
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets object_uuid
     *
     * @return string
     */
    public function getObjectUuid()
    {
        return $this->container['object_uuid'];
    }

    /**
     * Sets object_uuid
     *
     * @param string $object_uuid Die Object-Uuid
     *
     * @return $this
     */
    public function setObjectUuid($object_uuid)
    {
        $this->container['object_uuid'] = $object_uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

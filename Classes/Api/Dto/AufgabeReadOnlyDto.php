<?php
/**
 * AufgabeReadOnlyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * AufgabeReadOnlyDto Class Doc Comment
 *
 * @category    Class
 * @description Implementiert Methoden und Eigenschaften für die öffentlichen Aufgabe-Daten
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AufgabeReadOnlyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'AufgabeReadOnlyDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'ausfuehrender'         => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'ausfuehrungszeitpunkt' => '\DateTime',
        'beschreibung'          => 'string',
        'bezeichnung'           => 'string',
        'erinnerung_relativ'    => 'int',
        'ersteller'             => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'erstellungszeitpunkt'  => '\DateTime',
        'faelligkeit'           => '\DateTime',
        'faelligkeit_relativ'   => 'int',
        'fortschritt'           => 'double',
        'fristablauf_relativ'   => 'int',
        'ist_erledigt'          => 'bool',
        'ist_frist_abgelaufen'  => 'bool',
        'ist_privat'            => 'bool',
        'ist_vorlage'           => 'bool',
        'teilaufgaben'          => 'string',
        'wichtigkeit'           => 'int',
        'zuweisungen'           => '\Prosoft\RecruitingApi\Api\Dto\AufgabeZuweisungReadOnlyDto[]',
        'object_uuid'           => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'ausfuehrender'         => null,
        'ausfuehrungszeitpunkt' => 'date-time',
        'beschreibung'          => null,
        'bezeichnung'           => null,
        'erinnerung_relativ'    => 'int32',
        'ersteller'             => null,
        'erstellungszeitpunkt'  => 'date-time',
        'faelligkeit'           => 'date-time',
        'faelligkeit_relativ'   => 'int32',
        'fortschritt'           => 'double',
        'fristablauf_relativ'   => 'int32',
        'ist_erledigt'          => null,
        'ist_frist_abgelaufen'  => null,
        'ist_privat'            => null,
        'ist_vorlage'           => null,
        'teilaufgaben'          => null,
        'wichtigkeit'           => 'int32',
        'zuweisungen'           => null,
        'object_uuid'           => 'uuid',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ausfuehrender'         => 'Ausfuehrender',
        'ausfuehrungszeitpunkt' => 'Ausfuehrungszeitpunkt',
        'beschreibung'          => 'Beschreibung',
        'bezeichnung'           => 'Bezeichnung',
        'erinnerung_relativ'    => 'ErinnerungRelativ',
        'ersteller'             => 'Ersteller',
        'erstellungszeitpunkt'  => 'Erstellungszeitpunkt',
        'faelligkeit'           => 'Faelligkeit',
        'faelligkeit_relativ'   => 'FaelligkeitRelativ',
        'fortschritt'           => 'Fortschritt',
        'fristablauf_relativ'   => 'FristablaufRelativ',
        'ist_erledigt'          => 'IstErledigt',
        'ist_frist_abgelaufen'  => 'IstFristAbgelaufen',
        'ist_privat'            => 'IstPrivat',
        'ist_vorlage'           => 'IstVorlage',
        'teilaufgaben'          => 'Teilaufgaben',
        'wichtigkeit'           => 'Wichtigkeit',
        'zuweisungen'           => 'Zuweisungen',
        'object_uuid'           => 'ObjectUuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ausfuehrender'         => 'setAusfuehrender',
        'ausfuehrungszeitpunkt' => 'setAusfuehrungszeitpunkt',
        'beschreibung'          => 'setBeschreibung',
        'bezeichnung'           => 'setBezeichnung',
        'erinnerung_relativ'    => 'setErinnerungRelativ',
        'ersteller'             => 'setErsteller',
        'erstellungszeitpunkt'  => 'setErstellungszeitpunkt',
        'faelligkeit'           => 'setFaelligkeit',
        'faelligkeit_relativ'   => 'setFaelligkeitRelativ',
        'fortschritt'           => 'setFortschritt',
        'fristablauf_relativ'   => 'setFristablaufRelativ',
        'ist_erledigt'          => 'setIstErledigt',
        'ist_frist_abgelaufen'  => 'setIstFristAbgelaufen',
        'ist_privat'            => 'setIstPrivat',
        'ist_vorlage'           => 'setIstVorlage',
        'teilaufgaben'          => 'setTeilaufgaben',
        'wichtigkeit'           => 'setWichtigkeit',
        'zuweisungen'           => 'setZuweisungen',
        'object_uuid'           => 'setObjectUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ausfuehrender'         => 'getAusfuehrender',
        'ausfuehrungszeitpunkt' => 'getAusfuehrungszeitpunkt',
        'beschreibung'          => 'getBeschreibung',
        'bezeichnung'           => 'getBezeichnung',
        'erinnerung_relativ'    => 'getErinnerungRelativ',
        'ersteller'             => 'getErsteller',
        'erstellungszeitpunkt'  => 'getErstellungszeitpunkt',
        'faelligkeit'           => 'getFaelligkeit',
        'faelligkeit_relativ'   => 'getFaelligkeitRelativ',
        'fortschritt'           => 'getFortschritt',
        'fristablauf_relativ'   => 'getFristablaufRelativ',
        'ist_erledigt'          => 'getIstErledigt',
        'ist_frist_abgelaufen'  => 'getIstFristAbgelaufen',
        'ist_privat'            => 'getIstPrivat',
        'ist_vorlage'           => 'getIstVorlage',
        'teilaufgaben'          => 'getTeilaufgaben',
        'wichtigkeit'           => 'getWichtigkeit',
        'zuweisungen'           => 'getZuweisungen',
        'object_uuid'           => 'getObjectUuid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ERINNERUNG_RELATIV_0 = 0;
    const ERINNERUNG_RELATIV_5 = 5;
    const ERINNERUNG_RELATIV_10 = 10;
    const ERINNERUNG_RELATIV_15 = 15;
    const ERINNERUNG_RELATIV_30 = 30;
    const ERINNERUNG_RELATIV_60 = 60;
    const ERINNERUNG_RELATIV_120 = 120;
    const ERINNERUNG_RELATIV_240 = 240;
    const ERINNERUNG_RELATIV_480 = 480;
    const ERINNERUNG_RELATIV_720 = 720;
    const ERINNERUNG_RELATIV_1440 = 1440;
    const ERINNERUNG_RELATIV_2880 = 2880;
    const ERINNERUNG_RELATIV_5760 = 5760;
    const ERINNERUNG_RELATIV_10080 = 10080;
    const ERINNERUNG_RELATIV_20160 = 20160;
    const ERINNERUNG_RELATIV_MINUS_1 = -1;
    const FRISTABLAUF_RELATIV_0 = 0;
    const FRISTABLAUF_RELATIV_5 = 5;
    const FRISTABLAUF_RELATIV_10 = 10;
    const FRISTABLAUF_RELATIV_15 = 15;
    const FRISTABLAUF_RELATIV_30 = 30;
    const FRISTABLAUF_RELATIV_60 = 60;
    const FRISTABLAUF_RELATIV_120 = 120;
    const FRISTABLAUF_RELATIV_240 = 240;
    const FRISTABLAUF_RELATIV_480 = 480;
    const FRISTABLAUF_RELATIV_720 = 720;
    const FRISTABLAUF_RELATIV_1440 = 1440;
    const FRISTABLAUF_RELATIV_2880 = 2880;
    const FRISTABLAUF_RELATIV_5760 = 5760;
    const FRISTABLAUF_RELATIV_10080 = 10080;
    const FRISTABLAUF_RELATIV_20160 = 20160;
    const FRISTABLAUF_RELATIV_MINUS_1 = -1;
    const WICHTIGKEIT_1 = 1;
    const WICHTIGKEIT_2 = 2;
    const WICHTIGKEIT_3 = 3;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErinnerungRelativAllowableValues()
    {
        return [
            self::ERINNERUNG_RELATIV_0,
            self::ERINNERUNG_RELATIV_5,
            self::ERINNERUNG_RELATIV_10,
            self::ERINNERUNG_RELATIV_15,
            self::ERINNERUNG_RELATIV_30,
            self::ERINNERUNG_RELATIV_60,
            self::ERINNERUNG_RELATIV_120,
            self::ERINNERUNG_RELATIV_240,
            self::ERINNERUNG_RELATIV_480,
            self::ERINNERUNG_RELATIV_720,
            self::ERINNERUNG_RELATIV_1440,
            self::ERINNERUNG_RELATIV_2880,
            self::ERINNERUNG_RELATIV_5760,
            self::ERINNERUNG_RELATIV_10080,
            self::ERINNERUNG_RELATIV_20160,
            self::ERINNERUNG_RELATIV_MINUS_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFristablaufRelativAllowableValues()
    {
        return [
            self::FRISTABLAUF_RELATIV_0,
            self::FRISTABLAUF_RELATIV_5,
            self::FRISTABLAUF_RELATIV_10,
            self::FRISTABLAUF_RELATIV_15,
            self::FRISTABLAUF_RELATIV_30,
            self::FRISTABLAUF_RELATIV_60,
            self::FRISTABLAUF_RELATIV_120,
            self::FRISTABLAUF_RELATIV_240,
            self::FRISTABLAUF_RELATIV_480,
            self::FRISTABLAUF_RELATIV_720,
            self::FRISTABLAUF_RELATIV_1440,
            self::FRISTABLAUF_RELATIV_2880,
            self::FRISTABLAUF_RELATIV_5760,
            self::FRISTABLAUF_RELATIV_10080,
            self::FRISTABLAUF_RELATIV_20160,
            self::FRISTABLAUF_RELATIV_MINUS_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWichtigkeitAllowableValues()
    {
        return [
            self::WICHTIGKEIT_1,
            self::WICHTIGKEIT_2,
            self::WICHTIGKEIT_3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ausfuehrender'] = isset($data['ausfuehrender']) ? $data['ausfuehrender'] : null;
        $this->container['ausfuehrungszeitpunkt'] = isset($data['ausfuehrungszeitpunkt']) ? $data['ausfuehrungszeitpunkt'] : null;
        $this->container['beschreibung'] = isset($data['beschreibung']) ? $data['beschreibung'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['erinnerung_relativ'] = isset($data['erinnerung_relativ']) ? $data['erinnerung_relativ'] : null;
        $this->container['ersteller'] = isset($data['ersteller']) ? $data['ersteller'] : null;
        $this->container['erstellungszeitpunkt'] = isset($data['erstellungszeitpunkt']) ? $data['erstellungszeitpunkt'] : null;
        $this->container['faelligkeit'] = isset($data['faelligkeit']) ? $data['faelligkeit'] : null;
        $this->container['faelligkeit_relativ'] = isset($data['faelligkeit_relativ']) ? $data['faelligkeit_relativ'] : null;
        $this->container['fortschritt'] = isset($data['fortschritt']) ? $data['fortschritt'] : null;
        $this->container['fristablauf_relativ'] = isset($data['fristablauf_relativ']) ? $data['fristablauf_relativ'] : null;
        $this->container['ist_erledigt'] = isset($data['ist_erledigt']) ? $data['ist_erledigt'] : null;
        $this->container['ist_frist_abgelaufen'] = isset($data['ist_frist_abgelaufen']) ? $data['ist_frist_abgelaufen'] : null;
        $this->container['ist_privat'] = isset($data['ist_privat']) ? $data['ist_privat'] : null;
        $this->container['ist_vorlage'] = isset($data['ist_vorlage']) ? $data['ist_vorlage'] : null;
        $this->container['teilaufgaben'] = isset($data['teilaufgaben']) ? $data['teilaufgaben'] : null;
        $this->container['wichtigkeit'] = isset($data['wichtigkeit']) ? $data['wichtigkeit'] : null;
        $this->container['zuweisungen'] = isset($data['zuweisungen']) ? $data['zuweisungen'] : null;
        $this->container['object_uuid'] = isset($data['object_uuid']) ? $data['object_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getErinnerungRelativAllowableValues();
        if (!in_array($this->container['erinnerung_relativ'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'erinnerung_relativ', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFristablaufRelativAllowableValues();
        if (!in_array($this->container['fristablauf_relativ'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fristablauf_relativ', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWichtigkeitAllowableValues();
        if (!in_array($this->container['wichtigkeit'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'wichtigkeit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        $allowedValues = $this->getErinnerungRelativAllowableValues();
        if (!in_array($this->container['erinnerung_relativ'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getFristablaufRelativAllowableValues();
        if (!in_array($this->container['fristablauf_relativ'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getWichtigkeitAllowableValues();
        if (!in_array($this->container['wichtigkeit'], $allowedValues)) {
            return false;
        }
        return true;
    }

    /**
     * Gets ausfuehrender
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getAusfuehrender()
    {
        return $this->container['ausfuehrender'];
    }

    /**
     * Sets ausfuehrender
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $ausfuehrender ausfuehrender
     *
     * @return $this
     */
    public function setAusfuehrender($ausfuehrender)
    {
        $this->container['ausfuehrender'] = $ausfuehrender;

        return $this;
    }

    /**
     * Gets ausfuehrungszeitpunkt
     *
     * @return \DateTime
     */
    public function getAusfuehrungszeitpunkt()
    {
        return $this->container['ausfuehrungszeitpunkt'];
    }

    /**
     * Sets ausfuehrungszeitpunkt
     *
     * @param \DateTime $ausfuehrungszeitpunkt Holt oder setzt den Zeitpunkt der Ausführung
     *
     * @return $this
     */
    public function setAusfuehrungszeitpunkt($ausfuehrungszeitpunkt)
    {
        $this->container['ausfuehrungszeitpunkt'] = $ausfuehrungszeitpunkt;

        return $this;
    }

    /**
     * Gets beschreibung
     *
     * @return string
     */
    public function getBeschreibung()
    {
        return $this->container['beschreibung'];
    }

    /**
     * Sets beschreibung
     *
     * @param string $beschreibung Holt oder setzt die Beschreibung.
     *
     * @return $this
     */
    public function setBeschreibung($beschreibung)
    {
        $this->container['beschreibung'] = $beschreibung;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Holt oder setzt die Bezeichnung.
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets erinnerung_relativ
     *
     * @return int
     */
    public function getErinnerungRelativ()
    {
        return $this->container['erinnerung_relativ'];
    }

    /**
     * Sets erinnerung_relativ
     *
     * @param int $erinnerung_relativ Holt oder setzt das Erinnerungsdatum.
     *
     * @return $this
     */
    public function setErinnerungRelativ($erinnerung_relativ)
    {
        $allowedValues = $this->getErinnerungRelativAllowableValues();
        if (!is_null($erinnerung_relativ) && !in_array($erinnerung_relativ, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'erinnerung_relativ', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['erinnerung_relativ'] = $erinnerung_relativ;

        return $this;
    }

    /**
     * Gets ersteller
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getErsteller()
    {
        return $this->container['ersteller'];
    }

    /**
     * Sets ersteller
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $ersteller ersteller
     *
     * @return $this
     */
    public function setErsteller($ersteller)
    {
        $this->container['ersteller'] = $ersteller;

        return $this;
    }

    /**
     * Gets erstellungszeitpunkt
     *
     * @return \DateTime
     */
    public function getErstellungszeitpunkt()
    {
        return $this->container['erstellungszeitpunkt'];
    }

    /**
     * Sets erstellungszeitpunkt
     *
     * @param \DateTime $erstellungszeitpunkt Holt oder setzt den Erstellungszeitpunkt
     *
     * @return $this
     */
    public function setErstellungszeitpunkt($erstellungszeitpunkt)
    {
        $this->container['erstellungszeitpunkt'] = $erstellungszeitpunkt;

        return $this;
    }

    /**
     * Gets faelligkeit
     *
     * @return \DateTime
     */
    public function getFaelligkeit()
    {
        return $this->container['faelligkeit'];
    }

    /**
     * Sets faelligkeit
     *
     * @param \DateTime $faelligkeit Holt oder setzt das Datum der Fälligkeit.
     *
     * @return $this
     */
    public function setFaelligkeit($faelligkeit)
    {
        $this->container['faelligkeit'] = $faelligkeit;

        return $this;
    }

    /**
     * Gets faelligkeit_relativ
     *
     * @return int
     */
    public function getFaelligkeitRelativ()
    {
        return $this->container['faelligkeit_relativ'];
    }

    /**
     * Sets faelligkeit_relativ
     *
     * @param int $faelligkeit_relativ Holt oder setzt die relativen Minuten zur Fälligkeit der Aufgabe
     *
     * @return $this
     */
    public function setFaelligkeitRelativ($faelligkeit_relativ)
    {
        $this->container['faelligkeit_relativ'] = $faelligkeit_relativ;

        return $this;
    }

    /**
     * Gets fortschritt
     *
     * @return float
     */
    public function getFortschritt()
    {
        return $this->container['fortschritt'];
    }

    /**
     * Sets fortschritt
     *
     * @param float $fortschritt Holt oder setzt den Fortschritt.
     *
     * @return $this
     */
    public function setFortschritt($fortschritt)
    {
        $this->container['fortschritt'] = $fortschritt;

        return $this;
    }

    /**
     * Gets fristablauf_relativ
     *
     * @return int
     */
    public function getFristablaufRelativ()
    {
        return $this->container['fristablauf_relativ'];
    }

    /**
     * Sets fristablauf_relativ
     *
     * @param int $fristablauf_relativ Holt oder setzt das Datum des Fristablaufs.
     *
     * @return $this
     */
    public function setFristablaufRelativ($fristablauf_relativ)
    {
        $allowedValues = $this->getFristablaufRelativAllowableValues();
        if (!is_null($fristablauf_relativ) && !in_array($fristablauf_relativ, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fristablauf_relativ', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fristablauf_relativ'] = $fristablauf_relativ;

        return $this;
    }

    /**
     * Gets ist_erledigt
     *
     * @return bool
     */
    public function getIstErledigt()
    {
        return $this->container['ist_erledigt'];
    }

    /**
     * Sets ist_erledigt
     *
     * @param bool $ist_erledigt Holt oder setzt einen Wert, oder angibt, ob die Aufgabe erledigt ist.
     *
     * @return $this
     */
    public function setIstErledigt($ist_erledigt)
    {
        $this->container['ist_erledigt'] = $ist_erledigt;

        return $this;
    }

    /**
     * Gets ist_frist_abgelaufen
     *
     * @return bool
     */
    public function getIstFristAbgelaufen()
    {
        return $this->container['ist_frist_abgelaufen'];
    }

    /**
     * Sets ist_frist_abgelaufen
     *
     * @param bool $ist_frist_abgelaufen Holt oder setzt einen Wert, der angibt, ob die Frist der Aufgabe abgelaufen ist
     *
     * @return $this
     */
    public function setIstFristAbgelaufen($ist_frist_abgelaufen)
    {
        $this->container['ist_frist_abgelaufen'] = $ist_frist_abgelaufen;

        return $this;
    }

    /**
     * Gets ist_privat
     *
     * @return bool
     */
    public function getIstPrivat()
    {
        return $this->container['ist_privat'];
    }

    /**
     * Sets ist_privat
     *
     * @param bool $ist_privat Holt oder setzt einen Wert, oder angibt, ob die Aufgabe als privat markiert wurde.
     *
     * @return $this
     */
    public function setIstPrivat($ist_privat)
    {
        $this->container['ist_privat'] = $ist_privat;

        return $this;
    }

    /**
     * Gets ist_vorlage
     *
     * @return bool
     */
    public function getIstVorlage()
    {
        return $this->container['ist_vorlage'];
    }

    /**
     * Sets ist_vorlage
     *
     * @param bool $ist_vorlage Holt oder setzt einen Wert, oder angibt, ob die Aufgabe als Vorlage verwendet wird.
     *
     * @return $this
     */
    public function setIstVorlage($ist_vorlage)
    {
        $this->container['ist_vorlage'] = $ist_vorlage;

        return $this;
    }

    /**
     * Gets teilaufgaben
     *
     * @return string
     */
    public function getTeilaufgaben()
    {
        return $this->container['teilaufgaben'];
    }

    /**
     * Sets teilaufgaben
     *
     * @param string $teilaufgaben Holt oder setzt die Teilaufgaben
     *
     * @return $this
     */
    public function setTeilaufgaben($teilaufgaben)
    {
        $this->container['teilaufgaben'] = $teilaufgaben;

        return $this;
    }

    /**
     * Gets wichtigkeit
     *
     * @return int
     */
    public function getWichtigkeit()
    {
        return $this->container['wichtigkeit'];
    }

    /**
     * Sets wichtigkeit
     *
     * @param int $wichtigkeit Holt oder setzt die Wichtigkeit.
     *
     * @return $this
     */
    public function setWichtigkeit($wichtigkeit)
    {
        $allowedValues = $this->getWichtigkeitAllowableValues();
        if (!is_null($wichtigkeit) && !in_array($wichtigkeit, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'wichtigkeit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wichtigkeit'] = $wichtigkeit;

        return $this;
    }

    /**
     * Gets zuweisungen
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\AufgabeZuweisungReadOnlyDto[]
     */
    public function getZuweisungen()
    {
        return $this->container['zuweisungen'];
    }

    /**
     * Sets zuweisungen
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\AufgabeZuweisungReadOnlyDto[] $zuweisungen Holt oder setzt die Liste der
     *                                                                                 zugewiesenen Benutzer/Gruppen
     *
     * @return $this
     */
    public function setZuweisungen($zuweisungen)
    {
        $this->container['zuweisungen'] = $zuweisungen;

        return $this;
    }

    /**
     * Gets object_uuid
     *
     * @return string
     */
    public function getObjectUuid()
    {
        return $this->container['object_uuid'];
    }

    /**
     * Sets object_uuid
     *
     * @param string $object_uuid Die Object-Uuid
     *
     * @return $this
     */
    public function setObjectUuid($object_uuid)
    {
        $this->container['object_uuid'] = $object_uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * BewerbungReadOnlyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * BewerbungReadOnlyDto Class Doc Comment
 *
 * @category    Class
 * @description Implementiert Methoden und Eigenschaften für die öffentlichen Bewerbungsdaten
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BewerbungReadOnlyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'BewerbungReadOnlyDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'abteilung'                    => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'aktionen'                     => '\Prosoft\RecruitingApi\Api\Dto\BewerbungAktionReadOnlyDto[]',
        'angenommen_durch'             => 'string',
        'arbeitsstunden'               => 'double',
        'arbeitsstunden_bis'           => 'double',
        'arbeitsstunden_zeitraum'      => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'bearbeiter'                   => '\Prosoft\RecruitingApi\Api\Dto\BewerbungBearbeiterReadOnlyDto[]',
        'berufserfahrung'              => 'double',
        'bewerbungsdatum'              => '\DateTime',
        'beworben_als'                 => 'string',
        'datenschutzfaelligkeitsdatum' => '\DateTime',
        'datenspeicherung_abgelehnt'   => '\DateTime',
        'datenspeicherung_erteilt_von' => '\DateTime',
        'eingangsmedium'               => '\Prosoft\RecruitingApi\Api\Dto\SystemNameLookupDto',
        'einsatzradius'                => 'double',
        'eintritt_ab'                  => '\DateTime',
        'fragen'                       => '\Prosoft\RecruitingApi\Api\Dto\BewerbungFrageReadOnlyDto[]',
        'gehalt'                       => 'double',
        'gehalt_waehrung'              => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'gehalt_zeitraum'              => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'is_editable'                  => 'bool',
        'is_exported'                  => 'bool',
        'ist_aktiv'                    => 'bool',
        'ist_initiativ'                => 'bool',
        'ist_mitarbeiter_bekannt'      => 'bool',
        'mandant'                      => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'mandanten'                    => '\Prosoft\RecruitingApi\Api\Dto\LookupDto[]',
        'mandant_uuid'                 => 'string',
        'mitarbeiter_uuid'             => 'string',
        'qualifikation'                => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'quelle'                       => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'quelle_freitext'              => 'string',
        'sind_unterlagen_angefordert'  => 'bool',
        'status'                       => '\Prosoft\RecruitingApi\Api\Dto\KatStatusLookupDto',
        'stelle'                       => '\Prosoft\RecruitingApi\Api\Dto\BewerbungStelleMandantLookupDto',
        'stellenanzeige_info'          => 'string',
        'unterlagen_rueckversand'      => 'bool',
        'verfuegbar_bis'               => '\DateTime',
        'vertragsarten'                => '\Prosoft\RecruitingApi\Api\Dto\LookupDto[]',
        'vertreter'                    => '\Prosoft\RecruitingApi\Api\Dto\BewerbungVertreterReadOnlyDto[]',
        'vorgesetzte'                  => '\Prosoft\RecruitingApi\Api\Dto\BewerbungVorgesetzterReadOnlyDto[]',
        'vorstellungstermin'           => '\DateTime',
        'object_uuid'                  => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'abteilung'                    => null,
        'aktionen'                     => null,
        'angenommen_durch'             => null,
        'arbeitsstunden'               => 'double',
        'arbeitsstunden_bis'           => 'double',
        'arbeitsstunden_zeitraum'      => null,
        'bearbeiter'                   => null,
        'berufserfahrung'              => 'double',
        'bewerbungsdatum'              => 'date-time',
        'beworben_als'                 => null,
        'datenschutzfaelligkeitsdatum' => 'date-time',
        'datenspeicherung_abgelehnt'   => 'date-time',
        'datenspeicherung_erteilt_von' => 'date-time',
        'eingangsmedium'               => null,
        'einsatzradius'                => 'double',
        'eintritt_ab'                  => 'date-time',
        'fragen'                       => null,
        'gehalt'                       => 'double',
        'gehalt_waehrung'              => null,
        'gehalt_zeitraum'              => null,
        'is_editable'                  => null,
        'is_exported'                  => null,
        'ist_aktiv'                    => null,
        'ist_initiativ'                => null,
        'ist_mitarbeiter_bekannt'      => null,
        'mandant'                      => null,
        'mandanten'                    => null,
        'mandant_uuid'                 => 'uuid',
        'mitarbeiter_uuid'             => 'uuid',
        'qualifikation'                => null,
        'quelle'                       => null,
        'quelle_freitext'              => null,
        'sind_unterlagen_angefordert'  => null,
        'status'                       => null,
        'stelle'                       => null,
        'stellenanzeige_info'          => null,
        'unterlagen_rueckversand'      => null,
        'verfuegbar_bis'               => 'date-time',
        'vertragsarten'                => null,
        'vertreter'                    => null,
        'vorgesetzte'                  => null,
        'vorstellungstermin'           => 'date-time',
        'object_uuid'                  => 'uuid',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abteilung'                    => 'Abteilung',
        'aktionen'                     => 'Aktionen',
        'angenommen_durch'             => 'AngenommenDurch',
        'arbeitsstunden'               => 'Arbeitsstunden',
        'arbeitsstunden_bis'           => 'ArbeitsstundenBis',
        'arbeitsstunden_zeitraum'      => 'ArbeitsstundenZeitraum',
        'bearbeiter'                   => 'Bearbeiter',
        'berufserfahrung'              => 'Berufserfahrung',
        'bewerbungsdatum'              => 'Bewerbungsdatum',
        'beworben_als'                 => 'BeworbenAls',
        'datenschutzfaelligkeitsdatum' => 'Datenschutzfaelligkeitsdatum',
        'datenspeicherung_abgelehnt'   => 'DatenspeicherungAbgelehnt',
        'datenspeicherung_erteilt_von' => 'DatenspeicherungErteiltVon',
        'eingangsmedium'               => 'Eingangsmedium',
        'einsatzradius'                => 'Einsatzradius',
        'eintritt_ab'                  => 'EintrittAb',
        'fragen'                       => 'Fragen',
        'gehalt'                       => 'Gehalt',
        'gehalt_waehrung'              => 'GehaltWaehrung',
        'gehalt_zeitraum'              => 'GehaltZeitraum',
        'is_editable'                  => 'IsEditable',
        'is_exported'                  => 'IsExported',
        'ist_aktiv'                    => 'IstAktiv',
        'ist_initiativ'                => 'IstInitiativ',
        'ist_mitarbeiter_bekannt'      => 'IstMitarbeiterBekannt',
        'mandant'                      => 'Mandant',
        'mandanten'                    => 'Mandanten',
        'mandant_uuid'                 => 'MandantUuid',
        'mitarbeiter_uuid'             => 'MitarbeiterUuid',
        'qualifikation'                => 'Qualifikation',
        'quelle'                       => 'Quelle',
        'quelle_freitext'              => 'QuelleFreitext',
        'sind_unterlagen_angefordert'  => 'SindUnterlagenAngefordert',
        'status'                       => 'Status',
        'stelle'                       => 'Stelle',
        'stellenanzeige_info'          => 'StellenanzeigeInfo',
        'unterlagen_rueckversand'      => 'UnterlagenRueckversand',
        'verfuegbar_bis'               => 'VerfuegbarBis',
        'vertragsarten'                => 'Vertragsarten',
        'vertreter'                    => 'Vertreter',
        'vorgesetzte'                  => 'Vorgesetzte',
        'vorstellungstermin'           => 'Vorstellungstermin',
        'object_uuid'                  => 'ObjectUuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abteilung'                    => 'setAbteilung',
        'aktionen'                     => 'setAktionen',
        'angenommen_durch'             => 'setAngenommenDurch',
        'arbeitsstunden'               => 'setArbeitsstunden',
        'arbeitsstunden_bis'           => 'setArbeitsstundenBis',
        'arbeitsstunden_zeitraum'      => 'setArbeitsstundenZeitraum',
        'bearbeiter'                   => 'setBearbeiter',
        'berufserfahrung'              => 'setBerufserfahrung',
        'bewerbungsdatum'              => 'setBewerbungsdatum',
        'beworben_als'                 => 'setBeworbenAls',
        'datenschutzfaelligkeitsdatum' => 'setDatenschutzfaelligkeitsdatum',
        'datenspeicherung_abgelehnt'   => 'setDatenspeicherungAbgelehnt',
        'datenspeicherung_erteilt_von' => 'setDatenspeicherungErteiltVon',
        'eingangsmedium'               => 'setEingangsmedium',
        'einsatzradius'                => 'setEinsatzradius',
        'eintritt_ab'                  => 'setEintrittAb',
        'fragen'                       => 'setFragen',
        'gehalt'                       => 'setGehalt',
        'gehalt_waehrung'              => 'setGehaltWaehrung',
        'gehalt_zeitraum'              => 'setGehaltZeitraum',
        'is_editable'                  => 'setIsEditable',
        'is_exported'                  => 'setIsExported',
        'ist_aktiv'                    => 'setIstAktiv',
        'ist_initiativ'                => 'setIstInitiativ',
        'ist_mitarbeiter_bekannt'      => 'setIstMitarbeiterBekannt',
        'mandant'                      => 'setMandant',
        'mandanten'                    => 'setMandanten',
        'mandant_uuid'                 => 'setMandantUuid',
        'mitarbeiter_uuid'             => 'setMitarbeiterUuid',
        'qualifikation'                => 'setQualifikation',
        'quelle'                       => 'setQuelle',
        'quelle_freitext'              => 'setQuelleFreitext',
        'sind_unterlagen_angefordert'  => 'setSindUnterlagenAngefordert',
        'status'                       => 'setStatus',
        'stelle'                       => 'setStelle',
        'stellenanzeige_info'          => 'setStellenanzeigeInfo',
        'unterlagen_rueckversand'      => 'setUnterlagenRueckversand',
        'verfuegbar_bis'               => 'setVerfuegbarBis',
        'vertragsarten'                => 'setVertragsarten',
        'vertreter'                    => 'setVertreter',
        'vorgesetzte'                  => 'setVorgesetzte',
        'vorstellungstermin'           => 'setVorstellungstermin',
        'object_uuid'                  => 'setObjectUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abteilung'                    => 'getAbteilung',
        'aktionen'                     => 'getAktionen',
        'angenommen_durch'             => 'getAngenommenDurch',
        'arbeitsstunden'               => 'getArbeitsstunden',
        'arbeitsstunden_bis'           => 'getArbeitsstundenBis',
        'arbeitsstunden_zeitraum'      => 'getArbeitsstundenZeitraum',
        'bearbeiter'                   => 'getBearbeiter',
        'berufserfahrung'              => 'getBerufserfahrung',
        'bewerbungsdatum'              => 'getBewerbungsdatum',
        'beworben_als'                 => 'getBeworbenAls',
        'datenschutzfaelligkeitsdatum' => 'getDatenschutzfaelligkeitsdatum',
        'datenspeicherung_abgelehnt'   => 'getDatenspeicherungAbgelehnt',
        'datenspeicherung_erteilt_von' => 'getDatenspeicherungErteiltVon',
        'eingangsmedium'               => 'getEingangsmedium',
        'einsatzradius'                => 'getEinsatzradius',
        'eintritt_ab'                  => 'getEintrittAb',
        'fragen'                       => 'getFragen',
        'gehalt'                       => 'getGehalt',
        'gehalt_waehrung'              => 'getGehaltWaehrung',
        'gehalt_zeitraum'              => 'getGehaltZeitraum',
        'is_editable'                  => 'getIsEditable',
        'is_exported'                  => 'getIsExported',
        'ist_aktiv'                    => 'getIstAktiv',
        'ist_initiativ'                => 'getIstInitiativ',
        'ist_mitarbeiter_bekannt'      => 'getIstMitarbeiterBekannt',
        'mandant'                      => 'getMandant',
        'mandanten'                    => 'getMandanten',
        'mandant_uuid'                 => 'getMandantUuid',
        'mitarbeiter_uuid'             => 'getMitarbeiterUuid',
        'qualifikation'                => 'getQualifikation',
        'quelle'                       => 'getQuelle',
        'quelle_freitext'              => 'getQuelleFreitext',
        'sind_unterlagen_angefordert'  => 'getSindUnterlagenAngefordert',
        'status'                       => 'getStatus',
        'stelle'                       => 'getStelle',
        'stellenanzeige_info'          => 'getStellenanzeigeInfo',
        'unterlagen_rueckversand'      => 'getUnterlagenRueckversand',
        'verfuegbar_bis'               => 'getVerfuegbarBis',
        'vertragsarten'                => 'getVertragsarten',
        'vertreter'                    => 'getVertreter',
        'vorgesetzte'                  => 'getVorgesetzte',
        'vorstellungstermin'           => 'getVorstellungstermin',
        'object_uuid'                  => 'getObjectUuid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abteilung'] = isset($data['abteilung']) ? $data['abteilung'] : null;
        $this->container['aktionen'] = isset($data['aktionen']) ? $data['aktionen'] : null;
        $this->container['angenommen_durch'] = isset($data['angenommen_durch']) ? $data['angenommen_durch'] : null;
        $this->container['arbeitsstunden'] = isset($data['arbeitsstunden']) ? $data['arbeitsstunden'] : null;
        $this->container['arbeitsstunden_bis'] = isset($data['arbeitsstunden_bis']) ? $data['arbeitsstunden_bis'] : null;
        $this->container['arbeitsstunden_zeitraum'] = isset($data['arbeitsstunden_zeitraum']) ? $data['arbeitsstunden_zeitraum'] : null;
        $this->container['bearbeiter'] = isset($data['bearbeiter']) ? $data['bearbeiter'] : null;
        $this->container['berufserfahrung'] = isset($data['berufserfahrung']) ? $data['berufserfahrung'] : null;
        $this->container['bewerbungsdatum'] = isset($data['bewerbungsdatum']) ? $data['bewerbungsdatum'] : null;
        $this->container['beworben_als'] = isset($data['beworben_als']) ? $data['beworben_als'] : null;
        $this->container['datenschutzfaelligkeitsdatum'] = isset($data['datenschutzfaelligkeitsdatum']) ? $data['datenschutzfaelligkeitsdatum'] : null;
        $this->container['datenspeicherung_abgelehnt'] = isset($data['datenspeicherung_abgelehnt']) ? $data['datenspeicherung_abgelehnt'] : null;
        $this->container['datenspeicherung_erteilt_von'] = isset($data['datenspeicherung_erteilt_von']) ? $data['datenspeicherung_erteilt_von'] : null;
        $this->container['eingangsmedium'] = isset($data['eingangsmedium']) ? $data['eingangsmedium'] : null;
        $this->container['einsatzradius'] = isset($data['einsatzradius']) ? $data['einsatzradius'] : null;
        $this->container['eintritt_ab'] = isset($data['eintritt_ab']) ? $data['eintritt_ab'] : null;
        $this->container['fragen'] = isset($data['fragen']) ? $data['fragen'] : null;
        $this->container['gehalt'] = isset($data['gehalt']) ? $data['gehalt'] : null;
        $this->container['gehalt_waehrung'] = isset($data['gehalt_waehrung']) ? $data['gehalt_waehrung'] : null;
        $this->container['gehalt_zeitraum'] = isset($data['gehalt_zeitraum']) ? $data['gehalt_zeitraum'] : null;
        $this->container['is_editable'] = isset($data['is_editable']) ? $data['is_editable'] : null;
        $this->container['is_exported'] = isset($data['is_exported']) ? $data['is_exported'] : null;
        $this->container['ist_aktiv'] = isset($data['ist_aktiv']) ? $data['ist_aktiv'] : null;
        $this->container['ist_initiativ'] = isset($data['ist_initiativ']) ? $data['ist_initiativ'] : null;
        $this->container['ist_mitarbeiter_bekannt'] = isset($data['ist_mitarbeiter_bekannt']) ? $data['ist_mitarbeiter_bekannt'] : null;
        $this->container['mandant'] = isset($data['mandant']) ? $data['mandant'] : null;
        $this->container['mandanten'] = isset($data['mandanten']) ? $data['mandanten'] : null;
        $this->container['mandant_uuid'] = isset($data['mandant_uuid']) ? $data['mandant_uuid'] : null;
        $this->container['mitarbeiter_uuid'] = isset($data['mitarbeiter_uuid']) ? $data['mitarbeiter_uuid'] : null;
        $this->container['qualifikation'] = isset($data['qualifikation']) ? $data['qualifikation'] : null;
        $this->container['quelle'] = isset($data['quelle']) ? $data['quelle'] : null;
        $this->container['quelle_freitext'] = isset($data['quelle_freitext']) ? $data['quelle_freitext'] : null;
        $this->container['sind_unterlagen_angefordert'] = isset($data['sind_unterlagen_angefordert']) ? $data['sind_unterlagen_angefordert'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['stelle'] = isset($data['stelle']) ? $data['stelle'] : null;
        $this->container['stellenanzeige_info'] = isset($data['stellenanzeige_info']) ? $data['stellenanzeige_info'] : null;
        $this->container['unterlagen_rueckversand'] = isset($data['unterlagen_rueckversand']) ? $data['unterlagen_rueckversand'] : null;
        $this->container['verfuegbar_bis'] = isset($data['verfuegbar_bis']) ? $data['verfuegbar_bis'] : null;
        $this->container['vertragsarten'] = isset($data['vertragsarten']) ? $data['vertragsarten'] : null;
        $this->container['vertreter'] = isset($data['vertreter']) ? $data['vertreter'] : null;
        $this->container['vorgesetzte'] = isset($data['vorgesetzte']) ? $data['vorgesetzte'] : null;
        $this->container['vorstellungstermin'] = isset($data['vorstellungstermin']) ? $data['vorstellungstermin'] : null;
        $this->container['object_uuid'] = isset($data['object_uuid']) ? $data['object_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets abteilung
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getAbteilung()
    {
        return $this->container['abteilung'];
    }

    /**
     * Sets abteilung
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $abteilung abteilung
     *
     * @return $this
     */
    public function setAbteilung($abteilung)
    {
        $this->container['abteilung'] = $abteilung;

        return $this;
    }

    /**
     * Gets aktionen
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungAktionReadOnlyDto[]
     */
    public function getAktionen()
    {
        return $this->container['aktionen'];
    }

    /**
     * Sets aktionen
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungAktionReadOnlyDto[] $aktionen Holt oder setzt die
     *                                                                             Bewerbungsaktionen
     *
     * @return $this
     */
    public function setAktionen($aktionen)
    {
        $this->container['aktionen'] = $aktionen;

        return $this;
    }

    /**
     * Gets angenommen_durch
     *
     * @return string
     */
    public function getAngenommenDurch()
    {
        return $this->container['angenommen_durch'];
    }

    /**
     * Sets angenommen_durch
     *
     * @param string $angenommen_durch Holt oder setzt die Information darüber, von wem die Bewerbung entgegengenommen
     *                                 wurde.
     *
     * @return $this
     */
    public function setAngenommenDurch($angenommen_durch)
    {
        $this->container['angenommen_durch'] = $angenommen_durch;

        return $this;
    }

    /**
     * Gets arbeitsstunden
     *
     * @return float
     */
    public function getArbeitsstunden()
    {
        return $this->container['arbeitsstunden'];
    }

    /**
     * Sets arbeitsstunden
     *
     * @param float $arbeitsstunden Holt oder setzt die Arbeitsstunden.
     *
     * @return $this
     */
    public function setArbeitsstunden($arbeitsstunden)
    {
        $this->container['arbeitsstunden'] = $arbeitsstunden;

        return $this;
    }

    /**
     * Gets arbeitsstunden_bis
     *
     * @return float
     */
    public function getArbeitsstundenBis()
    {
        return $this->container['arbeitsstunden_bis'];
    }

    /**
     * Sets arbeitsstunden_bis
     *
     * @param float $arbeitsstunden_bis Holt oder setzt die ArbeitsstundenBis.
     *
     * @return $this
     */
    public function setArbeitsstundenBis($arbeitsstunden_bis)
    {
        $this->container['arbeitsstunden_bis'] = $arbeitsstunden_bis;

        return $this;
    }

    /**
     * Gets arbeitsstunden_zeitraum
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getArbeitsstundenZeitraum()
    {
        return $this->container['arbeitsstunden_zeitraum'];
    }

    /**
     * Sets arbeitsstunden_zeitraum
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $arbeitsstunden_zeitraum arbeitsstunden_zeitraum
     *
     * @return $this
     */
    public function setArbeitsstundenZeitraum($arbeitsstunden_zeitraum)
    {
        $this->container['arbeitsstunden_zeitraum'] = $arbeitsstunden_zeitraum;

        return $this;
    }

    /**
     * Gets bearbeiter
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungBearbeiterReadOnlyDto[]
     */
    public function getBearbeiter()
    {
        return $this->container['bearbeiter'];
    }

    /**
     * Sets bearbeiter
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungBearbeiterReadOnlyDto[] $bearbeiter Holt oder setzt die Bearbeiter
     *                                                                                   (BewerbungBearbeiter)
     *
     * @return $this
     */
    public function setBearbeiter($bearbeiter)
    {
        $this->container['bearbeiter'] = $bearbeiter;

        return $this;
    }

    /**
     * Gets berufserfahrung
     *
     * @return float
     */
    public function getBerufserfahrung()
    {
        return $this->container['berufserfahrung'];
    }

    /**
     * Sets berufserfahrung
     *
     * @param float $berufserfahrung Holt oder setzt die Berufserfahrung (in Jahren).
     *
     * @return $this
     */
    public function setBerufserfahrung($berufserfahrung)
    {
        $this->container['berufserfahrung'] = $berufserfahrung;

        return $this;
    }

    /**
     * Gets bewerbungsdatum
     *
     * @return \DateTime
     */
    public function getBewerbungsdatum()
    {
        return $this->container['bewerbungsdatum'];
    }

    /**
     * Sets bewerbungsdatum
     *
     * @param \DateTime $bewerbungsdatum Holt oder setzt das Bewerbungsdatum.
     *
     * @return $this
     */
    public function setBewerbungsdatum($bewerbungsdatum)
    {
        $this->container['bewerbungsdatum'] = $bewerbungsdatum;

        return $this;
    }

    /**
     * Gets beworben_als
     *
     * @return string
     */
    public function getBeworbenAls()
    {
        return $this->container['beworben_als'];
    }

    /**
     * Sets beworben_als
     *
     * @param string $beworben_als Gets or sets the beworben als.
     *
     * @return $this
     */
    public function setBeworbenAls($beworben_als)
    {
        $this->container['beworben_als'] = $beworben_als;

        return $this;
    }

    /**
     * Gets datenschutzfaelligkeitsdatum
     *
     * @return \DateTime
     */
    public function getDatenschutzfaelligkeitsdatum()
    {
        return $this->container['datenschutzfaelligkeitsdatum'];
    }

    /**
     * Sets datenschutzfaelligkeitsdatum
     *
     * @param \DateTime $datenschutzfaelligkeitsdatum Holt oder setzt ein Datum, das angibt, wann der Datensatz zur
     *                                                löschung nach EU-DSGVO vorgesehen ist
     *
     * @return $this
     */
    public function setDatenschutzfaelligkeitsdatum($datenschutzfaelligkeitsdatum)
    {
        $this->container['datenschutzfaelligkeitsdatum'] = $datenschutzfaelligkeitsdatum;

        return $this;
    }

    /**
     * Gets datenspeicherung_abgelehnt
     *
     * @return \DateTime
     */
    public function getDatenspeicherungAbgelehnt()
    {
        return $this->container['datenspeicherung_abgelehnt'];
    }

    /**
     * Sets datenspeicherung_abgelehnt
     *
     * @param \DateTime $datenspeicherung_abgelehnt Holt oder setzt den Zeitpunkt der Ablehnung der Datenspeicherung.
     *
     * @return $this
     */
    public function setDatenspeicherungAbgelehnt($datenspeicherung_abgelehnt)
    {
        $this->container['datenspeicherung_abgelehnt'] = $datenspeicherung_abgelehnt;

        return $this;
    }

    /**
     * Gets datenspeicherung_erteilt_von
     *
     * @return \DateTime
     */
    public function getDatenspeicherungErteiltVon()
    {
        return $this->container['datenspeicherung_erteilt_von'];
    }

    /**
     * Sets datenspeicherung_erteilt_von
     *
     * @param \DateTime $datenspeicherung_erteilt_von Holt oder setzt das Datum an dem der Mitarbeiter der
     *                                                Datenspeicherung zugestimmt hat
     *
     * @return $this
     */
    public function setDatenspeicherungErteiltVon($datenspeicherung_erteilt_von)
    {
        $this->container['datenspeicherung_erteilt_von'] = $datenspeicherung_erteilt_von;

        return $this;
    }

    /**
     * Gets eingangsmedium
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\SystemNameLookupDto
     */
    public function getEingangsmedium()
    {
        return $this->container['eingangsmedium'];
    }

    /**
     * Sets eingangsmedium
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\SystemNameLookupDto $eingangsmedium eingangsmedium
     *
     * @return $this
     */
    public function setEingangsmedium($eingangsmedium)
    {
        $this->container['eingangsmedium'] = $eingangsmedium;

        return $this;
    }

    /**
     * Gets einsatzradius
     *
     * @return float
     */
    public function getEinsatzradius()
    {
        return $this->container['einsatzradius'];
    }

    /**
     * Sets einsatzradius
     *
     * @param float $einsatzradius Holt oder setzt den Einsatzradius.
     *
     * @return $this
     */
    public function setEinsatzradius($einsatzradius)
    {
        $this->container['einsatzradius'] = $einsatzradius;

        return $this;
    }

    /**
     * Gets eintritt_ab
     *
     * @return \DateTime
     */
    public function getEintrittAb()
    {
        return $this->container['eintritt_ab'];
    }

    /**
     * Sets eintritt_ab
     *
     * @param \DateTime $eintritt_ab Holt oder setzt das Eintrittsdatum.
     *
     * @return $this
     */
    public function setEintrittAb($eintritt_ab)
    {
        $this->container['eintritt_ab'] = $eintritt_ab;

        return $this;
    }

    /**
     * Gets fragen
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungFrageReadOnlyDto[]
     */
    public function getFragen()
    {
        return $this->container['fragen'];
    }

    /**
     * Sets fragen
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungFrageReadOnlyDto[] $fragen Holt oder setzt die Fragen.
     *
     * @return $this
     */
    public function setFragen($fragen)
    {
        $this->container['fragen'] = $fragen;

        return $this;
    }

    /**
     * Gets gehalt
     *
     * @return float
     */
    public function getGehalt()
    {
        return $this->container['gehalt'];
    }

    /**
     * Sets gehalt
     *
     * @param float $gehalt Holt oder setzt das Gehalt.
     *
     * @return $this
     */
    public function setGehalt($gehalt)
    {
        $this->container['gehalt'] = $gehalt;

        return $this;
    }

    /**
     * Gets gehalt_waehrung
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getGehaltWaehrung()
    {
        return $this->container['gehalt_waehrung'];
    }

    /**
     * Sets gehalt_waehrung
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $gehalt_waehrung gehalt_waehrung
     *
     * @return $this
     */
    public function setGehaltWaehrung($gehalt_waehrung)
    {
        $this->container['gehalt_waehrung'] = $gehalt_waehrung;

        return $this;
    }

    /**
     * Gets gehalt_zeitraum
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getGehaltZeitraum()
    {
        return $this->container['gehalt_zeitraum'];
    }

    /**
     * Sets gehalt_zeitraum
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $gehalt_zeitraum gehalt_zeitraum
     *
     * @return $this
     */
    public function setGehaltZeitraum($gehalt_zeitraum)
    {
        $this->container['gehalt_zeitraum'] = $gehalt_zeitraum;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return bool
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param bool $is_editable Holt oder setzt einen Wert, der angibt, ob die Entität bearbeitbar ist.
     *
     * @return $this
     */
    public function setIsEditable($is_editable)
    {
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets is_exported
     *
     * @return bool
     */
    public function getIsExported()
    {
        return $this->container['is_exported'];
    }

    /**
     * Sets is_exported
     *
     * @param bool $is_exported Holt oder setzt einen Wert, der angibt, ob der Mitarbeiter exportiert wurde
     *
     * @return $this
     */
    public function setIsExported($is_exported)
    {
        $this->container['is_exported'] = $is_exported;

        return $this;
    }

    /**
     * Gets ist_aktiv
     *
     * @return bool
     */
    public function getIstAktiv()
    {
        return $this->container['ist_aktiv'];
    }

    /**
     * Sets ist_aktiv
     *
     * @param bool $ist_aktiv Holt oder setzt einen Wert, der angibt, ob die Bewerbung aktiv ist.
     *
     * @return $this
     */
    public function setIstAktiv($ist_aktiv)
    {
        $this->container['ist_aktiv'] = $ist_aktiv;

        return $this;
    }

    /**
     * Gets ist_initiativ
     *
     * @return bool
     */
    public function getIstInitiativ()
    {
        return $this->container['ist_initiativ'];
    }

    /**
     * Sets ist_initiativ
     *
     * @param bool $ist_initiativ Holt oder setzt einen Wert, der angibt, ob es sich um eine Initiativbewerbung handelt.
     *
     * @return $this
     */
    public function setIstInitiativ($ist_initiativ)
    {
        $this->container['ist_initiativ'] = $ist_initiativ;

        return $this;
    }

    /**
     * Gets ist_mitarbeiter_bekannt
     *
     * @return bool
     */
    public function getIstMitarbeiterBekannt()
    {
        return $this->container['ist_mitarbeiter_bekannt'];
    }

    /**
     * Sets ist_mitarbeiter_bekannt
     *
     * @param bool $ist_mitarbeiter_bekannt Holt oder setzt einen Wert, der angibt, ob der Mitarbeiter bekannt ist.
     *
     * @return $this
     */
    public function setIstMitarbeiterBekannt($ist_mitarbeiter_bekannt)
    {
        $this->container['ist_mitarbeiter_bekannt'] = $ist_mitarbeiter_bekannt;

        return $this;
    }

    /**
     * Gets mandant
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getMandant()
    {
        return $this->container['mandant'];
    }

    /**
     * Sets mandant
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $mandant mandant
     *
     * @return $this
     */
    public function setMandant($mandant)
    {
        $this->container['mandant'] = $mandant;

        return $this;
    }

    /**
     * Gets mandanten
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto[]
     */
    public function getMandanten()
    {
        return $this->container['mandanten'];
    }

    /**
     * Sets mandanten
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto[] $mandanten Holt oder setzt die freigegebenen Mandanten.
     *
     * @return $this
     */
    public function setMandanten($mandanten)
    {
        $this->container['mandanten'] = $mandanten;

        return $this;
    }

    /**
     * Gets mandant_uuid
     *
     * @return string
     */
    public function getMandantUuid()
    {
        return $this->container['mandant_uuid'];
    }

    /**
     * Sets mandant_uuid
     *
     * @param string $mandant_uuid Holt oder setzt die Mandant-UUID.
     *
     * @return $this
     */
    public function setMandantUuid($mandant_uuid)
    {
        $this->container['mandant_uuid'] = $mandant_uuid;

        return $this;
    }

    /**
     * Gets mitarbeiter_uuid
     *
     * @return string
     */
    public function getMitarbeiterUuid()
    {
        return $this->container['mitarbeiter_uuid'];
    }

    /**
     * Sets mitarbeiter_uuid
     *
     * @param string $mitarbeiter_uuid Holt oder setzt die MitarbeiterUuid.
     *
     * @return $this
     */
    public function setMitarbeiterUuid($mitarbeiter_uuid)
    {
        $this->container['mitarbeiter_uuid'] = $mitarbeiter_uuid;

        return $this;
    }

    /**
     * Gets qualifikation
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getQualifikation()
    {
        return $this->container['qualifikation'];
    }

    /**
     * Sets qualifikation
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $qualifikation qualifikation
     *
     * @return $this
     */
    public function setQualifikation($qualifikation)
    {
        $this->container['qualifikation'] = $qualifikation;

        return $this;
    }

    /**
     * Gets quelle
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getQuelle()
    {
        return $this->container['quelle'];
    }

    /**
     * Sets quelle
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $quelle quelle
     *
     * @return $this
     */
    public function setQuelle($quelle)
    {
        $this->container['quelle'] = $quelle;

        return $this;
    }

    /**
     * Gets quelle_freitext
     *
     * @return string
     */
    public function getQuelleFreitext()
    {
        return $this->container['quelle_freitext'];
    }

    /**
     * Sets quelle_freitext
     *
     * @param string $quelle_freitext Holt oder setzt den Freitext zur
     *                                Prosoft.Tenant.Dto.PublicV1.PublicBewerberReadOnlyDto.BewerbungReadOnlyDto.Quelle
     *                                .
     *
     * @return $this
     */
    public function setQuelleFreitext($quelle_freitext)
    {
        $this->container['quelle_freitext'] = $quelle_freitext;

        return $this;
    }

    /**
     * Gets sind_unterlagen_angefordert
     *
     * @return bool
     */
    public function getSindUnterlagenAngefordert()
    {
        return $this->container['sind_unterlagen_angefordert'];
    }

    /**
     * Sets sind_unterlagen_angefordert
     *
     * @param bool $sind_unterlagen_angefordert Holt oder setzt einen Wert, der angibt, ob Unterlagen angefordert
     *                                          wurden.
     *
     * @return $this
     */
    public function setSindUnterlagenAngefordert($sind_unterlagen_angefordert)
    {
        $this->container['sind_unterlagen_angefordert'] = $sind_unterlagen_angefordert;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\KatStatusLookupDto
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\KatStatusLookupDto $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets stelle
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungStelleMandantLookupDto
     */
    public function getStelle()
    {
        return $this->container['stelle'];
    }

    /**
     * Sets stelle
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungStelleMandantLookupDto $stelle stelle
     *
     * @return $this
     */
    public function setStelle($stelle)
    {
        $this->container['stelle'] = $stelle;

        return $this;
    }

    /**
     * Gets stellenanzeige_info
     *
     * @return string
     */
    public function getStellenanzeigeInfo()
    {
        return $this->container['stellenanzeige_info'];
    }

    /**
     * Sets stellenanzeige_info
     *
     * @param string $stellenanzeige_info Holt oder setzt die Information zur Stellenanzeige.
     *
     * @return $this
     */
    public function setStellenanzeigeInfo($stellenanzeige_info)
    {
        $this->container['stellenanzeige_info'] = $stellenanzeige_info;

        return $this;
    }

    /**
     * Gets unterlagen_rueckversand
     *
     * @return bool
     */
    public function getUnterlagenRueckversand()
    {
        return $this->container['unterlagen_rueckversand'];
    }

    /**
     * Sets unterlagen_rueckversand
     *
     * @param bool $unterlagen_rueckversand Holt oder setzt einen Wert, der angibt, ob die Unterlagen zurück geschickt
     *                                      wurden.
     *
     * @return $this
     */
    public function setUnterlagenRueckversand($unterlagen_rueckversand)
    {
        $this->container['unterlagen_rueckversand'] = $unterlagen_rueckversand;

        return $this;
    }

    /**
     * Gets verfuegbar_bis
     *
     * @return \DateTime
     */
    public function getVerfuegbarBis()
    {
        return $this->container['verfuegbar_bis'];
    }

    /**
     * Sets verfuegbar_bis
     *
     * @param \DateTime $verfuegbar_bis Holt oder setzt ein Datum, bis wann der Mitarbeiter verfügbar ist.
     *
     * @return $this
     */
    public function setVerfuegbarBis($verfuegbar_bis)
    {
        $this->container['verfuegbar_bis'] = $verfuegbar_bis;

        return $this;
    }

    /**
     * Gets vertragsarten
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto[]
     */
    public function getVertragsarten()
    {
        return $this->container['vertragsarten'];
    }

    /**
     * Sets vertragsarten
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto[] $vertragsarten Holt oder setzt die Vertragsarten.
     *
     * @return $this
     */
    public function setVertragsarten($vertragsarten)
    {
        $this->container['vertragsarten'] = $vertragsarten;

        return $this;
    }

    /**
     * Gets vertreter
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungVertreterReadOnlyDto[]
     */
    public function getVertreter()
    {
        return $this->container['vertreter'];
    }

    /**
     * Sets vertreter
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungVertreterReadOnlyDto[] $vertreter Holt oder setzt die Vertreter
     *                                                                                 (BewerbungVertreter)
     *
     * @return $this
     */
    public function setVertreter($vertreter)
    {
        $this->container['vertreter'] = $vertreter;

        return $this;
    }

    /**
     * Gets vorgesetzte
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungVorgesetzterReadOnlyDto[]
     */
    public function getVorgesetzte()
    {
        return $this->container['vorgesetzte'];
    }

    /**
     * Sets vorgesetzte
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungVorgesetzterReadOnlyDto[] $vorgesetzte Holt oder setzt die
     *                                                                                      Vorgesetzten
     *                                                                                      (BewerbungVorgesetzter)
     *
     * @return $this
     */
    public function setVorgesetzte($vorgesetzte)
    {
        $this->container['vorgesetzte'] = $vorgesetzte;

        return $this;
    }

    /**
     * Gets vorstellungstermin
     *
     * @return \DateTime
     */
    public function getVorstellungstermin()
    {
        return $this->container['vorstellungstermin'];
    }

    /**
     * Sets vorstellungstermin
     *
     * @param \DateTime $vorstellungstermin Holt oder setzt den Vorstellungstermin.
     *
     * @return $this
     */
    public function setVorstellungstermin($vorstellungstermin)
    {
        $this->container['vorstellungstermin'] = $vorstellungstermin;

        return $this;
    }

    /**
     * Gets object_uuid
     *
     * @return string
     */
    public function getObjectUuid()
    {
        return $this->container['object_uuid'];
    }

    /**
     * Sets object_uuid
     *
     * @param string $object_uuid Die Object-Uuid
     *
     * @return $this
     */
    public function setObjectUuid($object_uuid)
    {
        $this->container['object_uuid'] = $object_uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

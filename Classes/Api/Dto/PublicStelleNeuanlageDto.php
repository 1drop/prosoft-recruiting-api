<?php
/**
 * PublicStelleNeuanlageDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * PublicStelleNeuanlageDto Class Doc Comment
 *
 * @category    Class
 * @description Ein DTO zur Neuanlage einer Stelle
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PublicStelleNeuanlageDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PublicStelleNeuanlageDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'arbeitgeberleistung'               => 'string',
        'arbeitgeberleistung_header'        => 'string',
        'arbeitgebervorstellung'            => 'string',
        'arbeitgebervorstellung_header'     => 'string',
        'aufgaben'                          => 'string',
        'aufgaben_header'                   => 'string',
        'beginn'                            => '\DateTime',
        'beginn_ab_sofort'                  => 'bool',
        'berufserfahrung'                   => 'double',
        'bezeichnung'                       => 'string',
        'bezeichnung_ausschreibung'         => 'string',
        'datum_ab'                          => '\DateTime',
        'datum_bis'                         => '\DateTime',
        'einsatzort_hausnummer'             => 'string',
        'einsatzort_ort'                    => 'string',
        'einsatzort_plz'                    => 'string',
        'einsatzort_strasse'                => 'string',
        'fachliche_anforderungen'           => 'string',
        'fachliche_anforderungen_header'    => 'string',
        'kontakt_text'                      => 'string',
        'kontakt_text_header'               => 'string',
        'mandant'                           => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'persoenliche_anforderungen'        => 'string',
        'persoenliche_anforderungen_header' => 'string',
        'perspektiven'                      => 'string',
        'perspektiven_header'               => 'string',
        'stellen_id'                        => 'string',
        'stellenziel'                       => 'string',
        'stellenziel_header'                => 'string',
        'tarifvertrag'                      => 'string',
        'unternehmensbedeutung'             => 'string',
        'unternehmensbedeutung_header'      => 'string',
        'vakanzen'                          => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'arbeitgeberleistung'               => null,
        'arbeitgeberleistung_header'        => null,
        'arbeitgebervorstellung'            => null,
        'arbeitgebervorstellung_header'     => null,
        'aufgaben'                          => null,
        'aufgaben_header'                   => null,
        'beginn'                            => 'date-time',
        'beginn_ab_sofort'                  => null,
        'berufserfahrung'                   => 'double',
        'bezeichnung'                       => null,
        'bezeichnung_ausschreibung'         => null,
        'datum_ab'                          => 'date-time',
        'datum_bis'                         => 'date-time',
        'einsatzort_hausnummer'             => null,
        'einsatzort_ort'                    => null,
        'einsatzort_plz'                    => null,
        'einsatzort_strasse'                => null,
        'fachliche_anforderungen'           => null,
        'fachliche_anforderungen_header'    => null,
        'kontakt_text'                      => null,
        'kontakt_text_header'               => null,
        'mandant'                           => null,
        'persoenliche_anforderungen'        => null,
        'persoenliche_anforderungen_header' => null,
        'perspektiven'                      => null,
        'perspektiven_header'               => null,
        'stellen_id'                        => null,
        'stellenziel'                       => null,
        'stellenziel_header'                => null,
        'tarifvertrag'                      => null,
        'unternehmensbedeutung'             => null,
        'unternehmensbedeutung_header'      => null,
        'vakanzen'                          => 'int32',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arbeitgeberleistung'               => 'Arbeitgeberleistung',
        'arbeitgeberleistung_header'        => 'ArbeitgeberleistungHeader',
        'arbeitgebervorstellung'            => 'Arbeitgebervorstellung',
        'arbeitgebervorstellung_header'     => 'ArbeitgebervorstellungHeader',
        'aufgaben'                          => 'Aufgaben',
        'aufgaben_header'                   => 'AufgabenHeader',
        'beginn'                            => 'Beginn',
        'beginn_ab_sofort'                  => 'BeginnAbSofort',
        'berufserfahrung'                   => 'Berufserfahrung',
        'bezeichnung'                       => 'Bezeichnung',
        'bezeichnung_ausschreibung'         => 'BezeichnungAusschreibung',
        'datum_ab'                          => 'DatumAb',
        'datum_bis'                         => 'DatumBis',
        'einsatzort_hausnummer'             => 'EinsatzortHausnummer',
        'einsatzort_ort'                    => 'EinsatzortOrt',
        'einsatzort_plz'                    => 'EinsatzortPlz',
        'einsatzort_strasse'                => 'EinsatzortStrasse',
        'fachliche_anforderungen'           => 'FachlicheAnforderungen',
        'fachliche_anforderungen_header'    => 'FachlicheAnforderungenHeader',
        'kontakt_text'                      => 'KontaktText',
        'kontakt_text_header'               => 'KontaktTextHeader',
        'mandant'                           => 'Mandant',
        'persoenliche_anforderungen'        => 'PersoenlicheAnforderungen',
        'persoenliche_anforderungen_header' => 'PersoenlicheAnforderungenHeader',
        'perspektiven'                      => 'Perspektiven',
        'perspektiven_header'               => 'PerspektivenHeader',
        'stellen_id'                        => 'StellenID',
        'stellenziel'                       => 'Stellenziel',
        'stellenziel_header'                => 'StellenzielHeader',
        'tarifvertrag'                      => 'Tarifvertrag',
        'unternehmensbedeutung'             => 'Unternehmensbedeutung',
        'unternehmensbedeutung_header'      => 'UnternehmensbedeutungHeader',
        'vakanzen'                          => 'Vakanzen',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arbeitgeberleistung'               => 'setArbeitgeberleistung',
        'arbeitgeberleistung_header'        => 'setArbeitgeberleistungHeader',
        'arbeitgebervorstellung'            => 'setArbeitgebervorstellung',
        'arbeitgebervorstellung_header'     => 'setArbeitgebervorstellungHeader',
        'aufgaben'                          => 'setAufgaben',
        'aufgaben_header'                   => 'setAufgabenHeader',
        'beginn'                            => 'setBeginn',
        'beginn_ab_sofort'                  => 'setBeginnAbSofort',
        'berufserfahrung'                   => 'setBerufserfahrung',
        'bezeichnung'                       => 'setBezeichnung',
        'bezeichnung_ausschreibung'         => 'setBezeichnungAusschreibung',
        'datum_ab'                          => 'setDatumAb',
        'datum_bis'                         => 'setDatumBis',
        'einsatzort_hausnummer'             => 'setEinsatzortHausnummer',
        'einsatzort_ort'                    => 'setEinsatzortOrt',
        'einsatzort_plz'                    => 'setEinsatzortPlz',
        'einsatzort_strasse'                => 'setEinsatzortStrasse',
        'fachliche_anforderungen'           => 'setFachlicheAnforderungen',
        'fachliche_anforderungen_header'    => 'setFachlicheAnforderungenHeader',
        'kontakt_text'                      => 'setKontaktText',
        'kontakt_text_header'               => 'setKontaktTextHeader',
        'mandant'                           => 'setMandant',
        'persoenliche_anforderungen'        => 'setPersoenlicheAnforderungen',
        'persoenliche_anforderungen_header' => 'setPersoenlicheAnforderungenHeader',
        'perspektiven'                      => 'setPerspektiven',
        'perspektiven_header'               => 'setPerspektivenHeader',
        'stellen_id'                        => 'setStellenId',
        'stellenziel'                       => 'setStellenziel',
        'stellenziel_header'                => 'setStellenzielHeader',
        'tarifvertrag'                      => 'setTarifvertrag',
        'unternehmensbedeutung'             => 'setUnternehmensbedeutung',
        'unternehmensbedeutung_header'      => 'setUnternehmensbedeutungHeader',
        'vakanzen'                          => 'setVakanzen',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arbeitgeberleistung'               => 'getArbeitgeberleistung',
        'arbeitgeberleistung_header'        => 'getArbeitgeberleistungHeader',
        'arbeitgebervorstellung'            => 'getArbeitgebervorstellung',
        'arbeitgebervorstellung_header'     => 'getArbeitgebervorstellungHeader',
        'aufgaben'                          => 'getAufgaben',
        'aufgaben_header'                   => 'getAufgabenHeader',
        'beginn'                            => 'getBeginn',
        'beginn_ab_sofort'                  => 'getBeginnAbSofort',
        'berufserfahrung'                   => 'getBerufserfahrung',
        'bezeichnung'                       => 'getBezeichnung',
        'bezeichnung_ausschreibung'         => 'getBezeichnungAusschreibung',
        'datum_ab'                          => 'getDatumAb',
        'datum_bis'                         => 'getDatumBis',
        'einsatzort_hausnummer'             => 'getEinsatzortHausnummer',
        'einsatzort_ort'                    => 'getEinsatzortOrt',
        'einsatzort_plz'                    => 'getEinsatzortPlz',
        'einsatzort_strasse'                => 'getEinsatzortStrasse',
        'fachliche_anforderungen'           => 'getFachlicheAnforderungen',
        'fachliche_anforderungen_header'    => 'getFachlicheAnforderungenHeader',
        'kontakt_text'                      => 'getKontaktText',
        'kontakt_text_header'               => 'getKontaktTextHeader',
        'mandant'                           => 'getMandant',
        'persoenliche_anforderungen'        => 'getPersoenlicheAnforderungen',
        'persoenliche_anforderungen_header' => 'getPersoenlicheAnforderungenHeader',
        'perspektiven'                      => 'getPerspektiven',
        'perspektiven_header'               => 'getPerspektivenHeader',
        'stellen_id'                        => 'getStellenId',
        'stellenziel'                       => 'getStellenziel',
        'stellenziel_header'                => 'getStellenzielHeader',
        'tarifvertrag'                      => 'getTarifvertrag',
        'unternehmensbedeutung'             => 'getUnternehmensbedeutung',
        'unternehmensbedeutung_header'      => 'getUnternehmensbedeutungHeader',
        'vakanzen'                          => 'getVakanzen',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arbeitgeberleistung'] = isset($data['arbeitgeberleistung']) ? $data['arbeitgeberleistung'] : null;
        $this->container['arbeitgeberleistung_header'] = isset($data['arbeitgeberleistung_header']) ? $data['arbeitgeberleistung_header'] : null;
        $this->container['arbeitgebervorstellung'] = isset($data['arbeitgebervorstellung']) ? $data['arbeitgebervorstellung'] : null;
        $this->container['arbeitgebervorstellung_header'] = isset($data['arbeitgebervorstellung_header']) ? $data['arbeitgebervorstellung_header'] : null;
        $this->container['aufgaben'] = isset($data['aufgaben']) ? $data['aufgaben'] : null;
        $this->container['aufgaben_header'] = isset($data['aufgaben_header']) ? $data['aufgaben_header'] : null;
        $this->container['beginn'] = isset($data['beginn']) ? $data['beginn'] : null;
        $this->container['beginn_ab_sofort'] = isset($data['beginn_ab_sofort']) ? $data['beginn_ab_sofort'] : null;
        $this->container['berufserfahrung'] = isset($data['berufserfahrung']) ? $data['berufserfahrung'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['bezeichnung_ausschreibung'] = isset($data['bezeichnung_ausschreibung']) ? $data['bezeichnung_ausschreibung'] : null;
        $this->container['datum_ab'] = isset($data['datum_ab']) ? $data['datum_ab'] : null;
        $this->container['datum_bis'] = isset($data['datum_bis']) ? $data['datum_bis'] : null;
        $this->container['einsatzort_hausnummer'] = isset($data['einsatzort_hausnummer']) ? $data['einsatzort_hausnummer'] : null;
        $this->container['einsatzort_ort'] = isset($data['einsatzort_ort']) ? $data['einsatzort_ort'] : null;
        $this->container['einsatzort_plz'] = isset($data['einsatzort_plz']) ? $data['einsatzort_plz'] : null;
        $this->container['einsatzort_strasse'] = isset($data['einsatzort_strasse']) ? $data['einsatzort_strasse'] : null;
        $this->container['fachliche_anforderungen'] = isset($data['fachliche_anforderungen']) ? $data['fachliche_anforderungen'] : null;
        $this->container['fachliche_anforderungen_header'] = isset($data['fachliche_anforderungen_header']) ? $data['fachliche_anforderungen_header'] : null;
        $this->container['kontakt_text'] = isset($data['kontakt_text']) ? $data['kontakt_text'] : null;
        $this->container['kontakt_text_header'] = isset($data['kontakt_text_header']) ? $data['kontakt_text_header'] : null;
        $this->container['mandant'] = isset($data['mandant']) ? $data['mandant'] : null;
        $this->container['persoenliche_anforderungen'] = isset($data['persoenliche_anforderungen']) ? $data['persoenliche_anforderungen'] : null;
        $this->container['persoenliche_anforderungen_header'] = isset($data['persoenliche_anforderungen_header']) ? $data['persoenliche_anforderungen_header'] : null;
        $this->container['perspektiven'] = isset($data['perspektiven']) ? $data['perspektiven'] : null;
        $this->container['perspektiven_header'] = isset($data['perspektiven_header']) ? $data['perspektiven_header'] : null;
        $this->container['stellen_id'] = isset($data['stellen_id']) ? $data['stellen_id'] : null;
        $this->container['stellenziel'] = isset($data['stellenziel']) ? $data['stellenziel'] : null;
        $this->container['stellenziel_header'] = isset($data['stellenziel_header']) ? $data['stellenziel_header'] : null;
        $this->container['tarifvertrag'] = isset($data['tarifvertrag']) ? $data['tarifvertrag'] : null;
        $this->container['unternehmensbedeutung'] = isset($data['unternehmensbedeutung']) ? $data['unternehmensbedeutung'] : null;
        $this->container['unternehmensbedeutung_header'] = isset($data['unternehmensbedeutung_header']) ? $data['unternehmensbedeutung_header'] : null;
        $this->container['vakanzen'] = isset($data['vakanzen']) ? $data['vakanzen'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bezeichnung'] === null) {
            $invalidProperties[] = "'bezeichnung' can't be null";
        }
        if ($this->container['einsatzort_ort'] === null) {
            $invalidProperties[] = "'einsatzort_ort' can't be null";
        }
        if ($this->container['mandant'] === null) {
            $invalidProperties[] = "'mandant' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if ($this->container['bezeichnung'] === null) {
            return false;
        }
        if ($this->container['einsatzort_ort'] === null) {
            return false;
        }
        if ($this->container['mandant'] === null) {
            return false;
        }
        return true;
    }

    /**
     * Gets arbeitgeberleistung
     *
     * @return string
     */
    public function getArbeitgeberleistung()
    {
        return $this->container['arbeitgeberleistung'];
    }

    /**
     * Sets arbeitgeberleistung
     *
     * @param string $arbeitgeberleistung Holt oder setzt die Arbeitgeberleistung.
     *
     * @return $this
     */
    public function setArbeitgeberleistung($arbeitgeberleistung)
    {
        $this->container['arbeitgeberleistung'] = $arbeitgeberleistung;

        return $this;
    }

    /**
     * Gets arbeitgeberleistung_header
     *
     * @return string
     */
    public function getArbeitgeberleistungHeader()
    {
        return $this->container['arbeitgeberleistung_header'];
    }

    /**
     * Sets arbeitgeberleistung_header
     *
     * @param string $arbeitgeberleistung_header Holt oder setzt die Überschrift zur Arbeitgeberleistung.
     *
     * @return $this
     */
    public function setArbeitgeberleistungHeader($arbeitgeberleistung_header)
    {
        $this->container['arbeitgeberleistung_header'] = $arbeitgeberleistung_header;

        return $this;
    }

    /**
     * Gets arbeitgebervorstellung
     *
     * @return string
     */
    public function getArbeitgebervorstellung()
    {
        return $this->container['arbeitgebervorstellung'];
    }

    /**
     * Sets arbeitgebervorstellung
     *
     * @param string $arbeitgebervorstellung Holt oder setzt die Arbeitgebervorstellung.
     *
     * @return $this
     */
    public function setArbeitgebervorstellung($arbeitgebervorstellung)
    {
        $this->container['arbeitgebervorstellung'] = $arbeitgebervorstellung;

        return $this;
    }

    /**
     * Gets arbeitgebervorstellung_header
     *
     * @return string
     */
    public function getArbeitgebervorstellungHeader()
    {
        return $this->container['arbeitgebervorstellung_header'];
    }

    /**
     * Sets arbeitgebervorstellung_header
     *
     * @param string $arbeitgebervorstellung_header Holt oder setzt die Überschrift zur Arbeitgebervorstellung.
     *
     * @return $this
     */
    public function setArbeitgebervorstellungHeader($arbeitgebervorstellung_header)
    {
        $this->container['arbeitgebervorstellung_header'] = $arbeitgebervorstellung_header;

        return $this;
    }

    /**
     * Gets aufgaben
     *
     * @return string
     */
    public function getAufgaben()
    {
        return $this->container['aufgaben'];
    }

    /**
     * Sets aufgaben
     *
     * @param string $aufgaben Holt oder setzt die Aufgaben.
     *
     * @return $this
     */
    public function setAufgaben($aufgaben)
    {
        $this->container['aufgaben'] = $aufgaben;

        return $this;
    }

    /**
     * Gets aufgaben_header
     *
     * @return string
     */
    public function getAufgabenHeader()
    {
        return $this->container['aufgaben_header'];
    }

    /**
     * Sets aufgaben_header
     *
     * @param string $aufgaben_header Holt oder setzt die Überschrift zu den Aufgaben.
     *
     * @return $this
     */
    public function setAufgabenHeader($aufgaben_header)
    {
        $this->container['aufgaben_header'] = $aufgaben_header;

        return $this;
    }

    /**
     * Gets beginn
     *
     * @return \DateTime
     */
    public function getBeginn()
    {
        return $this->container['beginn'];
    }

    /**
     * Sets beginn
     *
     * @param \DateTime $beginn Holt oder setzt den Beginn.
     *
     * @return $this
     */
    public function setBeginn($beginn)
    {
        $this->container['beginn'] = $beginn;

        return $this;
    }

    /**
     * Gets beginn_ab_sofort
     *
     * @return bool
     */
    public function getBeginnAbSofort()
    {
        return $this->container['beginn_ab_sofort'];
    }

    /**
     * Sets beginn_ab_sofort
     *
     * @param bool $beginn_ab_sofort Holt oder setzt einen Wert, der angibt, ob die Stelle ab sofort beginnt.
     *
     * @return $this
     */
    public function setBeginnAbSofort($beginn_ab_sofort)
    {
        $this->container['beginn_ab_sofort'] = $beginn_ab_sofort;

        return $this;
    }

    /**
     * Gets berufserfahrung
     *
     * @return float
     */
    public function getBerufserfahrung()
    {
        return $this->container['berufserfahrung'];
    }

    /**
     * Sets berufserfahrung
     *
     * @param float $berufserfahrung Holt oder setzt die Berufserfahrung.
     *
     * @return $this
     */
    public function setBerufserfahrung($berufserfahrung)
    {
        $this->container['berufserfahrung'] = $berufserfahrung;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Holt oder setzt die Bezeichnung.
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets bezeichnung_ausschreibung
     *
     * @return string
     */
    public function getBezeichnungAusschreibung()
    {
        return $this->container['bezeichnung_ausschreibung'];
    }

    /**
     * Sets bezeichnung_ausschreibung
     *
     * @param string $bezeichnung_ausschreibung Holt oder setzt den Titel für die Stellenanzeige.
     *
     * @return $this
     */
    public function setBezeichnungAusschreibung($bezeichnung_ausschreibung)
    {
        $this->container['bezeichnung_ausschreibung'] = $bezeichnung_ausschreibung;

        return $this;
    }

    /**
     * Gets datum_ab
     *
     * @return \DateTime
     */
    public function getDatumAb()
    {
        return $this->container['datum_ab'];
    }

    /**
     * Sets datum_ab
     *
     * @param \DateTime $datum_ab Holt oder setzt das Datum, ab dem Veröffentlicht werden soll.
     *
     * @return $this
     */
    public function setDatumAb($datum_ab)
    {
        $this->container['datum_ab'] = $datum_ab;

        return $this;
    }

    /**
     * Gets datum_bis
     *
     * @return \DateTime
     */
    public function getDatumBis()
    {
        return $this->container['datum_bis'];
    }

    /**
     * Sets datum_bis
     *
     * @param \DateTime $datum_bis Holt oder setzt das Datum, bis zu dem die Veröffentlichung läuft.
     *
     * @return $this
     */
    public function setDatumBis($datum_bis)
    {
        $this->container['datum_bis'] = $datum_bis;

        return $this;
    }

    /**
     * Gets einsatzort_hausnummer
     *
     * @return string
     */
    public function getEinsatzortHausnummer()
    {
        return $this->container['einsatzort_hausnummer'];
    }

    /**
     * Sets einsatzort_hausnummer
     *
     * @param string $einsatzort_hausnummer Holt oder setzt die Hausnummer des Einsatzortes.
     *
     * @return $this
     */
    public function setEinsatzortHausnummer($einsatzort_hausnummer)
    {
        $this->container['einsatzort_hausnummer'] = $einsatzort_hausnummer;

        return $this;
    }

    /**
     * Gets einsatzort_ort
     *
     * @return string
     */
    public function getEinsatzortOrt()
    {
        return $this->container['einsatzort_ort'];
    }

    /**
     * Sets einsatzort_ort
     *
     * @param string $einsatzort_ort Holt oder setzt den EinsatzortOrt.
     *
     * @return $this
     */
    public function setEinsatzortOrt($einsatzort_ort)
    {
        $this->container['einsatzort_ort'] = $einsatzort_ort;

        return $this;
    }

    /**
     * Gets einsatzort_plz
     *
     * @return string
     */
    public function getEinsatzortPlz()
    {
        return $this->container['einsatzort_plz'];
    }

    /**
     * Sets einsatzort_plz
     *
     * @param string $einsatzort_plz Holt oder setzt die Postleitzahl des Einsatzortes.
     *
     * @return $this
     */
    public function setEinsatzortPlz($einsatzort_plz)
    {
        $this->container['einsatzort_plz'] = $einsatzort_plz;

        return $this;
    }

    /**
     * Gets einsatzort_strasse
     *
     * @return string
     */
    public function getEinsatzortStrasse()
    {
        return $this->container['einsatzort_strasse'];
    }

    /**
     * Sets einsatzort_strasse
     *
     * @param string $einsatzort_strasse Holt oder setzt die Straße des Einsatzortes.
     *
     * @return $this
     */
    public function setEinsatzortStrasse($einsatzort_strasse)
    {
        $this->container['einsatzort_strasse'] = $einsatzort_strasse;

        return $this;
    }

    /**
     * Gets fachliche_anforderungen
     *
     * @return string
     */
    public function getFachlicheAnforderungen()
    {
        return $this->container['fachliche_anforderungen'];
    }

    /**
     * Sets fachliche_anforderungen
     *
     * @param string $fachliche_anforderungen Holt oder setzt die FachlicheAnforderungen.
     *
     * @return $this
     */
    public function setFachlicheAnforderungen($fachliche_anforderungen)
    {
        $this->container['fachliche_anforderungen'] = $fachliche_anforderungen;

        return $this;
    }

    /**
     * Gets fachliche_anforderungen_header
     *
     * @return string
     */
    public function getFachlicheAnforderungenHeader()
    {
        return $this->container['fachliche_anforderungen_header'];
    }

    /**
     * Sets fachliche_anforderungen_header
     *
     * @param string $fachliche_anforderungen_header Holt oder setzt die Überschrift für die fachlichen Anforderungen.
     *
     * @return $this
     */
    public function setFachlicheAnforderungenHeader($fachliche_anforderungen_header)
    {
        $this->container['fachliche_anforderungen_header'] = $fachliche_anforderungen_header;

        return $this;
    }

    /**
     * Gets kontakt_text
     *
     * @return string
     */
    public function getKontaktText()
    {
        return $this->container['kontakt_text'];
    }

    /**
     * Sets kontakt_text
     *
     * @param string $kontakt_text Holt oder setzt den KontaktText
     *
     * @return $this
     */
    public function setKontaktText($kontakt_text)
    {
        $this->container['kontakt_text'] = $kontakt_text;

        return $this;
    }

    /**
     * Gets kontakt_text_header
     *
     * @return string
     */
    public function getKontaktTextHeader()
    {
        return $this->container['kontakt_text_header'];
    }

    /**
     * Sets kontakt_text_header
     *
     * @param string $kontakt_text_header Holt oder setzt die Überschrift für KontaktText.
     *
     * @return $this
     */
    public function setKontaktTextHeader($kontakt_text_header)
    {
        $this->container['kontakt_text_header'] = $kontakt_text_header;

        return $this;
    }

    /**
     * Gets mandant
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getMandant()
    {
        return $this->container['mandant'];
    }

    /**
     * Sets mandant
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $mandant mandant
     *
     * @return $this
     */
    public function setMandant($mandant)
    {
        $this->container['mandant'] = $mandant;

        return $this;
    }

    /**
     * Gets persoenliche_anforderungen
     *
     * @return string
     */
    public function getPersoenlicheAnforderungen()
    {
        return $this->container['persoenliche_anforderungen'];
    }

    /**
     * Sets persoenliche_anforderungen
     *
     * @param string $persoenliche_anforderungen Holt oder setzt die PersoenlicheAnforderungen.
     *
     * @return $this
     */
    public function setPersoenlicheAnforderungen($persoenliche_anforderungen)
    {
        $this->container['persoenliche_anforderungen'] = $persoenliche_anforderungen;

        return $this;
    }

    /**
     * Gets persoenliche_anforderungen_header
     *
     * @return string
     */
    public function getPersoenlicheAnforderungenHeader()
    {
        return $this->container['persoenliche_anforderungen_header'];
    }

    /**
     * Sets persoenliche_anforderungen_header
     *
     * @param string $persoenliche_anforderungen_header Holt oder setzt die Überschrift für die persönlichen
     *                                                  Anforderungen.
     *
     * @return $this
     */
    public function setPersoenlicheAnforderungenHeader($persoenliche_anforderungen_header)
    {
        $this->container['persoenliche_anforderungen_header'] = $persoenliche_anforderungen_header;

        return $this;
    }

    /**
     * Gets perspektiven
     *
     * @return string
     */
    public function getPerspektiven()
    {
        return $this->container['perspektiven'];
    }

    /**
     * Sets perspektiven
     *
     * @param string $perspektiven Holt oder setzt die Perspektiven.
     *
     * @return $this
     */
    public function setPerspektiven($perspektiven)
    {
        $this->container['perspektiven'] = $perspektiven;

        return $this;
    }

    /**
     * Gets perspektiven_header
     *
     * @return string
     */
    public function getPerspektivenHeader()
    {
        return $this->container['perspektiven_header'];
    }

    /**
     * Sets perspektiven_header
     *
     * @param string $perspektiven_header Holt oder setzt die Überschrift für die Perspektiven.
     *
     * @return $this
     */
    public function setPerspektivenHeader($perspektiven_header)
    {
        $this->container['perspektiven_header'] = $perspektiven_header;

        return $this;
    }

    /**
     * Gets stellen_id
     *
     * @return string
     */
    public function getStellenId()
    {
        return $this->container['stellen_id'];
    }

    /**
     * Sets stellen_id
     *
     * @param string $stellen_id Holt oder setzt die StellenID.
     *
     * @return $this
     */
    public function setStellenId($stellen_id)
    {
        $this->container['stellen_id'] = $stellen_id;

        return $this;
    }

    /**
     * Gets stellenziel
     *
     * @return string
     */
    public function getStellenziel()
    {
        return $this->container['stellenziel'];
    }

    /**
     * Sets stellenziel
     *
     * @param string $stellenziel Holt oder setzt das Stellenziel.
     *
     * @return $this
     */
    public function setStellenziel($stellenziel)
    {
        $this->container['stellenziel'] = $stellenziel;

        return $this;
    }

    /**
     * Gets stellenziel_header
     *
     * @return string
     */
    public function getStellenzielHeader()
    {
        return $this->container['stellenziel_header'];
    }

    /**
     * Sets stellenziel_header
     *
     * @param string $stellenziel_header Holt oder setzt die Überschrift zum Stellenziel.
     *
     * @return $this
     */
    public function setStellenzielHeader($stellenziel_header)
    {
        $this->container['stellenziel_header'] = $stellenziel_header;

        return $this;
    }

    /**
     * Gets tarifvertrag
     *
     * @return string
     */
    public function getTarifvertrag()
    {
        return $this->container['tarifvertrag'];
    }

    /**
     * Sets tarifvertrag
     *
     * @param string $tarifvertrag Holt oder setzt den Tarifvertrag.
     *
     * @return $this
     */
    public function setTarifvertrag($tarifvertrag)
    {
        $this->container['tarifvertrag'] = $tarifvertrag;

        return $this;
    }

    /**
     * Gets unternehmensbedeutung
     *
     * @return string
     */
    public function getUnternehmensbedeutung()
    {
        return $this->container['unternehmensbedeutung'];
    }

    /**
     * Sets unternehmensbedeutung
     *
     * @param string $unternehmensbedeutung Holt oder setzt die Unternehmensbedeutung.
     *
     * @return $this
     */
    public function setUnternehmensbedeutung($unternehmensbedeutung)
    {
        $this->container['unternehmensbedeutung'] = $unternehmensbedeutung;

        return $this;
    }

    /**
     * Gets unternehmensbedeutung_header
     *
     * @return string
     */
    public function getUnternehmensbedeutungHeader()
    {
        return $this->container['unternehmensbedeutung_header'];
    }

    /**
     * Sets unternehmensbedeutung_header
     *
     * @param string $unternehmensbedeutung_header Holt oder setzt die Überschrift für die Unternehmensbedeutung.
     *
     * @return $this
     */
    public function setUnternehmensbedeutungHeader($unternehmensbedeutung_header)
    {
        $this->container['unternehmensbedeutung_header'] = $unternehmensbedeutung_header;

        return $this;
    }

    /**
     * Gets vakanzen
     *
     * @return int
     */
    public function getVakanzen()
    {
        return $this->container['vakanzen'];
    }

    /**
     * Sets vakanzen
     *
     * @param int $vakanzen Holt oder setzt die Vakanzen.
     *
     * @return $this
     */
    public function setVakanzen($vakanzen)
    {
        $this->container['vakanzen'] = $vakanzen;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

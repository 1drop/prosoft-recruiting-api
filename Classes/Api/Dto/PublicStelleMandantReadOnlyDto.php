<?php
/**
 * PublicStelleMandantReadOnlyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * PublicStelleMandantReadOnlyDto Class Doc Comment
 *
 * @category    Class
 * @description Die Daten des Mandanten der Stelle
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PublicStelleMandantReadOnlyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PublicStelleMandantReadOnlyDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'adresse_hausnummer' => 'string',
        'adresse_ort'        => 'string',
        'adresse_plz'        => 'string',
        'adresse_strasse'    => 'string',
        'firmenbezeichnung'  => 'string',
        'mandant_uuid'       => 'string',
        'website'            => 'string',
        'object_uuid'        => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'adresse_hausnummer' => null,
        'adresse_ort'        => null,
        'adresse_plz'        => null,
        'adresse_strasse'    => null,
        'firmenbezeichnung'  => null,
        'mandant_uuid'       => 'uuid',
        'website'            => null,
        'object_uuid'        => 'uuid',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adresse_hausnummer' => 'AdresseHausnummer',
        'adresse_ort'        => 'AdresseOrt',
        'adresse_plz'        => 'AdressePlz',
        'adresse_strasse'    => 'AdresseStrasse',
        'firmenbezeichnung'  => 'Firmenbezeichnung',
        'mandant_uuid'       => 'MandantUuid',
        'website'            => 'Website',
        'object_uuid'        => 'ObjectUuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adresse_hausnummer' => 'setAdresseHausnummer',
        'adresse_ort'        => 'setAdresseOrt',
        'adresse_plz'        => 'setAdressePlz',
        'adresse_strasse'    => 'setAdresseStrasse',
        'firmenbezeichnung'  => 'setFirmenbezeichnung',
        'mandant_uuid'       => 'setMandantUuid',
        'website'            => 'setWebsite',
        'object_uuid'        => 'setObjectUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adresse_hausnummer' => 'getAdresseHausnummer',
        'adresse_ort'        => 'getAdresseOrt',
        'adresse_plz'        => 'getAdressePlz',
        'adresse_strasse'    => 'getAdresseStrasse',
        'firmenbezeichnung'  => 'getFirmenbezeichnung',
        'mandant_uuid'       => 'getMandantUuid',
        'website'            => 'getWebsite',
        'object_uuid'        => 'getObjectUuid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adresse_hausnummer'] = isset($data['adresse_hausnummer']) ? $data['adresse_hausnummer'] : null;
        $this->container['adresse_ort'] = isset($data['adresse_ort']) ? $data['adresse_ort'] : null;
        $this->container['adresse_plz'] = isset($data['adresse_plz']) ? $data['adresse_plz'] : null;
        $this->container['adresse_strasse'] = isset($data['adresse_strasse']) ? $data['adresse_strasse'] : null;
        $this->container['firmenbezeichnung'] = isset($data['firmenbezeichnung']) ? $data['firmenbezeichnung'] : null;
        $this->container['mandant_uuid'] = isset($data['mandant_uuid']) ? $data['mandant_uuid'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['object_uuid'] = isset($data['object_uuid']) ? $data['object_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets adresse_hausnummer
     *
     * @return string
     */
    public function getAdresseHausnummer()
    {
        return $this->container['adresse_hausnummer'];
    }

    /**
     * Sets adresse_hausnummer
     *
     * @param string $adresse_hausnummer Die Hausnummer
     *
     * @return $this
     */
    public function setAdresseHausnummer($adresse_hausnummer)
    {
        $this->container['adresse_hausnummer'] = $adresse_hausnummer;

        return $this;
    }

    /**
     * Gets adresse_ort
     *
     * @return string
     */
    public function getAdresseOrt()
    {
        return $this->container['adresse_ort'];
    }

    /**
     * Sets adresse_ort
     *
     * @param string $adresse_ort Der Ort
     *
     * @return $this
     */
    public function setAdresseOrt($adresse_ort)
    {
        $this->container['adresse_ort'] = $adresse_ort;

        return $this;
    }

    /**
     * Gets adresse_plz
     *
     * @return string
     */
    public function getAdressePlz()
    {
        return $this->container['adresse_plz'];
    }

    /**
     * Sets adresse_plz
     *
     * @param string $adresse_plz Die PLZ
     *
     * @return $this
     */
    public function setAdressePlz($adresse_plz)
    {
        $this->container['adresse_plz'] = $adresse_plz;

        return $this;
    }

    /**
     * Gets adresse_strasse
     *
     * @return string
     */
    public function getAdresseStrasse()
    {
        return $this->container['adresse_strasse'];
    }

    /**
     * Sets adresse_strasse
     *
     * @param string $adresse_strasse Die Strasse
     *
     * @return $this
     */
    public function setAdresseStrasse($adresse_strasse)
    {
        $this->container['adresse_strasse'] = $adresse_strasse;

        return $this;
    }

    /**
     * Gets firmenbezeichnung
     *
     * @return string
     */
    public function getFirmenbezeichnung()
    {
        return $this->container['firmenbezeichnung'];
    }

    /**
     * Sets firmenbezeichnung
     *
     * @param string $firmenbezeichnung Die Firmenbezeichnung
     *
     * @return $this
     */
    public function setFirmenbezeichnung($firmenbezeichnung)
    {
        $this->container['firmenbezeichnung'] = $firmenbezeichnung;

        return $this;
    }

    /**
     * Gets mandant_uuid
     *
     * @return string
     */
    public function getMandantUuid()
    {
        return $this->container['mandant_uuid'];
    }

    /**
     * Sets mandant_uuid
     *
     * @param string $mandant_uuid Die Uuid des Mandanten
     *
     * @return $this
     */
    public function setMandantUuid($mandant_uuid)
    {
        $this->container['mandant_uuid'] = $mandant_uuid;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website Die Website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets object_uuid
     *
     * @return string
     */
    public function getObjectUuid()
    {
        return $this->container['object_uuid'];
    }

    /**
     * Sets object_uuid
     *
     * @param string $object_uuid Die Object-Uuid
     *
     * @return $this
     */
    public function setObjectUuid($object_uuid)
    {
        $this->container['object_uuid'] = $object_uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

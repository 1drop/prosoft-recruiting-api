<?php
/**
 * PublicStelleReadOnlyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * PublicStelleReadOnlyDto Class Doc Comment
 *
 * @category    Class
 * @description Die Daten einer Stelle
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PublicStelleReadOnlyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PublicStelleReadOnlyDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'abteilung'                         => 'string',
        'arbeitgeberleistung'               => 'string',
        'arbeitgeberleistung_header'        => 'string',
        'arbeitgebervorstellung'            => 'string',
        'arbeitgebervorstellung_header'     => 'string',
        'aufgaben'                          => 'string',
        'aufgaben_header'                   => 'string',
        'befristung'                        => '\DateTime',
        'befristungsgrund'                  => 'string',
        'beginn'                            => '\DateTime',
        'beginn_ab_sofort'                  => 'bool',
        'bezeichnung'                       => 'string',
        'bezeichnung_ausschreibung'         => 'string',
        'datum_ab'                          => '\DateTime',
        'datum_bis'                         => '\DateTime',
        'einsatzort_geografische_breite'    => 'double',
        'einsatzort_geografische_laenge'    => 'double',
        'einsatzort_land'                   => 'string',
        'einsatzort_ort'                    => 'string',
        'einsatzort_plz'                    => 'string',
        'fachliche_anforderungen'           => 'string',
        'fachliche_anforderungen_header'    => 'string',
        'image1_uuid'                       => 'string',
        'image_kontakt_uuid'                => 'string',
        'kontakt_text'                      => 'string',
        'kontakt_text_header'               => 'string',
        'logo1_uuid'                        => 'string',
        'mandant'                           => '\Prosoft\RecruitingApi\Api\Dto\PublicStelleMandantReadOnlyDto',
        'persoenliche_anforderungen'        => 'string',
        'persoenliche_anforderungen_header' => 'string',
        'perspektiven'                      => 'string',
        'perspektiven_header'               => 'string',
        'stelle_bewerbung_url'              => 'string',
        'stellen_id'                        => 'string',
        'stellenziel'                       => 'string',
        'stellenziel_header'                => 'string',
        'unternehmensbedeutung'             => 'string',
        'unternehmensbedeutung_header'      => 'string',
        'vakanzart'                         => 'string',
        'vakanzarten'                       => '\Prosoft\RecruitingApi\Api\Dto\LookupDto[]',
        'vakanzen'                          => 'double',
        'vertragsart'                       => 'string',
        'vertragsarten'                     => '\Prosoft\RecruitingApi\Api\Dto\LookupDto[]',
        'object_uuid'                       => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'abteilung'                         => null,
        'arbeitgeberleistung'               => null,
        'arbeitgeberleistung_header'        => null,
        'arbeitgebervorstellung'            => null,
        'arbeitgebervorstellung_header'     => null,
        'aufgaben'                          => null,
        'aufgaben_header'                   => null,
        'befristung'                        => 'date-time',
        'befristungsgrund'                  => null,
        'beginn'                            => 'date-time',
        'beginn_ab_sofort'                  => null,
        'bezeichnung'                       => null,
        'bezeichnung_ausschreibung'         => null,
        'datum_ab'                          => 'date-time',
        'datum_bis'                         => 'date-time',
        'einsatzort_geografische_breite'    => 'double',
        'einsatzort_geografische_laenge'    => 'double',
        'einsatzort_land'                   => null,
        'einsatzort_ort'                    => null,
        'einsatzort_plz'                    => null,
        'fachliche_anforderungen'           => null,
        'fachliche_anforderungen_header'    => null,
        'image1_uuid'                       => 'uuid',
        'image_kontakt_uuid'                => 'uuid',
        'kontakt_text'                      => null,
        'kontakt_text_header'               => null,
        'logo1_uuid'                        => 'uuid',
        'mandant'                           => null,
        'persoenliche_anforderungen'        => null,
        'persoenliche_anforderungen_header' => null,
        'perspektiven'                      => null,
        'perspektiven_header'               => null,
        'stelle_bewerbung_url'              => null,
        'stellen_id'                        => null,
        'stellenziel'                       => null,
        'stellenziel_header'                => null,
        'unternehmensbedeutung'             => null,
        'unternehmensbedeutung_header'      => null,
        'vakanzart'                         => null,
        'vakanzarten'                       => null,
        'vakanzen'                          => 'double',
        'vertragsart'                       => null,
        'vertragsarten'                     => null,
        'object_uuid'                       => 'uuid',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abteilung'                         => 'Abteilung',
        'arbeitgeberleistung'               => 'Arbeitgeberleistung',
        'arbeitgeberleistung_header'        => 'ArbeitgeberleistungHeader',
        'arbeitgebervorstellung'            => 'Arbeitgebervorstellung',
        'arbeitgebervorstellung_header'     => 'ArbeitgebervorstellungHeader',
        'aufgaben'                          => 'Aufgaben',
        'aufgaben_header'                   => 'AufgabenHeader',
        'befristung'                        => 'Befristung',
        'befristungsgrund'                  => 'Befristungsgrund',
        'beginn'                            => 'Beginn',
        'beginn_ab_sofort'                  => 'BeginnAbSofort',
        'bezeichnung'                       => 'Bezeichnung',
        'bezeichnung_ausschreibung'         => 'BezeichnungAusschreibung',
        'datum_ab'                          => 'DatumAb',
        'datum_bis'                         => 'DatumBis',
        'einsatzort_geografische_breite'    => 'EinsatzortGeografischeBreite',
        'einsatzort_geografische_laenge'    => 'EinsatzortGeografischeLaenge',
        'einsatzort_land'                   => 'EinsatzortLand',
        'einsatzort_ort'                    => 'EinsatzortOrt',
        'einsatzort_plz'                    => 'EinsatzortPlz',
        'fachliche_anforderungen'           => 'FachlicheAnforderungen',
        'fachliche_anforderungen_header'    => 'FachlicheAnforderungenHeader',
        'image1_uuid'                       => 'Image1Uuid',
        'image_kontakt_uuid'                => 'ImageKontaktUuid',
        'kontakt_text'                      => 'KontaktText',
        'kontakt_text_header'               => 'KontaktTextHeader',
        'logo1_uuid'                        => 'Logo1Uuid',
        'mandant'                           => 'Mandant',
        'persoenliche_anforderungen'        => 'PersoenlicheAnforderungen',
        'persoenliche_anforderungen_header' => 'PersoenlicheAnforderungenHeader',
        'perspektiven'                      => 'Perspektiven',
        'perspektiven_header'               => 'PerspektivenHeader',
        'stelle_bewerbung_url'              => 'StelleBewerbungUrl',
        'stellen_id'                        => 'StellenID',
        'stellenziel'                       => 'Stellenziel',
        'stellenziel_header'                => 'StellenzielHeader',
        'unternehmensbedeutung'             => 'Unternehmensbedeutung',
        'unternehmensbedeutung_header'      => 'UnternehmensbedeutungHeader',
        'vakanzart'                         => 'Vakanzart',
        'vakanzarten'                       => 'Vakanzarten',
        'vakanzen'                          => 'Vakanzen',
        'vertragsart'                       => 'Vertragsart',
        'vertragsarten'                     => 'Vertragsarten',
        'object_uuid'                       => 'ObjectUuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abteilung'                         => 'setAbteilung',
        'arbeitgeberleistung'               => 'setArbeitgeberleistung',
        'arbeitgeberleistung_header'        => 'setArbeitgeberleistungHeader',
        'arbeitgebervorstellung'            => 'setArbeitgebervorstellung',
        'arbeitgebervorstellung_header'     => 'setArbeitgebervorstellungHeader',
        'aufgaben'                          => 'setAufgaben',
        'aufgaben_header'                   => 'setAufgabenHeader',
        'befristung'                        => 'setBefristung',
        'befristungsgrund'                  => 'setBefristungsgrund',
        'beginn'                            => 'setBeginn',
        'beginn_ab_sofort'                  => 'setBeginnAbSofort',
        'bezeichnung'                       => 'setBezeichnung',
        'bezeichnung_ausschreibung'         => 'setBezeichnungAusschreibung',
        'datum_ab'                          => 'setDatumAb',
        'datum_bis'                         => 'setDatumBis',
        'einsatzort_geografische_breite'    => 'setEinsatzortGeografischeBreite',
        'einsatzort_geografische_laenge'    => 'setEinsatzortGeografischeLaenge',
        'einsatzort_land'                   => 'setEinsatzortLand',
        'einsatzort_ort'                    => 'setEinsatzortOrt',
        'einsatzort_plz'                    => 'setEinsatzortPlz',
        'fachliche_anforderungen'           => 'setFachlicheAnforderungen',
        'fachliche_anforderungen_header'    => 'setFachlicheAnforderungenHeader',
        'image1_uuid'                       => 'setImage1Uuid',
        'image_kontakt_uuid'                => 'setImageKontaktUuid',
        'kontakt_text'                      => 'setKontaktText',
        'kontakt_text_header'               => 'setKontaktTextHeader',
        'logo1_uuid'                        => 'setLogo1Uuid',
        'mandant'                           => 'setMandant',
        'persoenliche_anforderungen'        => 'setPersoenlicheAnforderungen',
        'persoenliche_anforderungen_header' => 'setPersoenlicheAnforderungenHeader',
        'perspektiven'                      => 'setPerspektiven',
        'perspektiven_header'               => 'setPerspektivenHeader',
        'stelle_bewerbung_url'              => 'setStelleBewerbungUrl',
        'stellen_id'                        => 'setStellenId',
        'stellenziel'                       => 'setStellenziel',
        'stellenziel_header'                => 'setStellenzielHeader',
        'unternehmensbedeutung'             => 'setUnternehmensbedeutung',
        'unternehmensbedeutung_header'      => 'setUnternehmensbedeutungHeader',
        'vakanzart'                         => 'setVakanzart',
        'vakanzarten'                       => 'setVakanzarten',
        'vakanzen'                          => 'setVakanzen',
        'vertragsart'                       => 'setVertragsart',
        'vertragsarten'                     => 'setVertragsarten',
        'object_uuid'                       => 'setObjectUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abteilung'                         => 'getAbteilung',
        'arbeitgeberleistung'               => 'getArbeitgeberleistung',
        'arbeitgeberleistung_header'        => 'getArbeitgeberleistungHeader',
        'arbeitgebervorstellung'            => 'getArbeitgebervorstellung',
        'arbeitgebervorstellung_header'     => 'getArbeitgebervorstellungHeader',
        'aufgaben'                          => 'getAufgaben',
        'aufgaben_header'                   => 'getAufgabenHeader',
        'befristung'                        => 'getBefristung',
        'befristungsgrund'                  => 'getBefristungsgrund',
        'beginn'                            => 'getBeginn',
        'beginn_ab_sofort'                  => 'getBeginnAbSofort',
        'bezeichnung'                       => 'getBezeichnung',
        'bezeichnung_ausschreibung'         => 'getBezeichnungAusschreibung',
        'datum_ab'                          => 'getDatumAb',
        'datum_bis'                         => 'getDatumBis',
        'einsatzort_geografische_breite'    => 'getEinsatzortGeografischeBreite',
        'einsatzort_geografische_laenge'    => 'getEinsatzortGeografischeLaenge',
        'einsatzort_land'                   => 'getEinsatzortLand',
        'einsatzort_ort'                    => 'getEinsatzortOrt',
        'einsatzort_plz'                    => 'getEinsatzortPlz',
        'fachliche_anforderungen'           => 'getFachlicheAnforderungen',
        'fachliche_anforderungen_header'    => 'getFachlicheAnforderungenHeader',
        'image1_uuid'                       => 'getImage1Uuid',
        'image_kontakt_uuid'                => 'getImageKontaktUuid',
        'kontakt_text'                      => 'getKontaktText',
        'kontakt_text_header'               => 'getKontaktTextHeader',
        'logo1_uuid'                        => 'getLogo1Uuid',
        'mandant'                           => 'getMandant',
        'persoenliche_anforderungen'        => 'getPersoenlicheAnforderungen',
        'persoenliche_anforderungen_header' => 'getPersoenlicheAnforderungenHeader',
        'perspektiven'                      => 'getPerspektiven',
        'perspektiven_header'               => 'getPerspektivenHeader',
        'stelle_bewerbung_url'              => 'getStelleBewerbungUrl',
        'stellen_id'                        => 'getStellenId',
        'stellenziel'                       => 'getStellenziel',
        'stellenziel_header'                => 'getStellenzielHeader',
        'unternehmensbedeutung'             => 'getUnternehmensbedeutung',
        'unternehmensbedeutung_header'      => 'getUnternehmensbedeutungHeader',
        'vakanzart'                         => 'getVakanzart',
        'vakanzarten'                       => 'getVakanzarten',
        'vakanzen'                          => 'getVakanzen',
        'vertragsart'                       => 'getVertragsart',
        'vertragsarten'                     => 'getVertragsarten',
        'object_uuid'                       => 'getObjectUuid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abteilung'] = isset($data['abteilung']) ? $data['abteilung'] : null;
        $this->container['arbeitgeberleistung'] = isset($data['arbeitgeberleistung']) ? $data['arbeitgeberleistung'] : null;
        $this->container['arbeitgeberleistung_header'] = isset($data['arbeitgeberleistung_header']) ? $data['arbeitgeberleistung_header'] : null;
        $this->container['arbeitgebervorstellung'] = isset($data['arbeitgebervorstellung']) ? $data['arbeitgebervorstellung'] : null;
        $this->container['arbeitgebervorstellung_header'] = isset($data['arbeitgebervorstellung_header']) ? $data['arbeitgebervorstellung_header'] : null;
        $this->container['aufgaben'] = isset($data['aufgaben']) ? $data['aufgaben'] : null;
        $this->container['aufgaben_header'] = isset($data['aufgaben_header']) ? $data['aufgaben_header'] : null;
        $this->container['befristung'] = isset($data['befristung']) ? $data['befristung'] : null;
        $this->container['befristungsgrund'] = isset($data['befristungsgrund']) ? $data['befristungsgrund'] : null;
        $this->container['beginn'] = isset($data['beginn']) ? $data['beginn'] : null;
        $this->container['beginn_ab_sofort'] = isset($data['beginn_ab_sofort']) ? $data['beginn_ab_sofort'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['bezeichnung_ausschreibung'] = isset($data['bezeichnung_ausschreibung']) ? $data['bezeichnung_ausschreibung'] : null;
        $this->container['datum_ab'] = isset($data['datum_ab']) ? $data['datum_ab'] : null;
        $this->container['datum_bis'] = isset($data['datum_bis']) ? $data['datum_bis'] : null;
        $this->container['einsatzort_geografische_breite'] = isset($data['einsatzort_geografische_breite']) ? $data['einsatzort_geografische_breite'] : null;
        $this->container['einsatzort_geografische_laenge'] = isset($data['einsatzort_geografische_laenge']) ? $data['einsatzort_geografische_laenge'] : null;
        $this->container['einsatzort_land'] = isset($data['einsatzort_land']) ? $data['einsatzort_land'] : null;
        $this->container['einsatzort_ort'] = isset($data['einsatzort_ort']) ? $data['einsatzort_ort'] : null;
        $this->container['einsatzort_plz'] = isset($data['einsatzort_plz']) ? $data['einsatzort_plz'] : null;
        $this->container['fachliche_anforderungen'] = isset($data['fachliche_anforderungen']) ? $data['fachliche_anforderungen'] : null;
        $this->container['fachliche_anforderungen_header'] = isset($data['fachliche_anforderungen_header']) ? $data['fachliche_anforderungen_header'] : null;
        $this->container['image1_uuid'] = isset($data['image1_uuid']) ? $data['image1_uuid'] : null;
        $this->container['image_kontakt_uuid'] = isset($data['image_kontakt_uuid']) ? $data['image_kontakt_uuid'] : null;
        $this->container['kontakt_text'] = isset($data['kontakt_text']) ? $data['kontakt_text'] : null;
        $this->container['kontakt_text_header'] = isset($data['kontakt_text_header']) ? $data['kontakt_text_header'] : null;
        $this->container['logo1_uuid'] = isset($data['logo1_uuid']) ? $data['logo1_uuid'] : null;
        $this->container['mandant'] = isset($data['mandant']) ? $data['mandant'] : null;
        $this->container['persoenliche_anforderungen'] = isset($data['persoenliche_anforderungen']) ? $data['persoenliche_anforderungen'] : null;
        $this->container['persoenliche_anforderungen_header'] = isset($data['persoenliche_anforderungen_header']) ? $data['persoenliche_anforderungen_header'] : null;
        $this->container['perspektiven'] = isset($data['perspektiven']) ? $data['perspektiven'] : null;
        $this->container['perspektiven_header'] = isset($data['perspektiven_header']) ? $data['perspektiven_header'] : null;
        $this->container['stelle_bewerbung_url'] = isset($data['stelle_bewerbung_url']) ? $data['stelle_bewerbung_url'] : null;
        $this->container['stellen_id'] = isset($data['stellen_id']) ? $data['stellen_id'] : null;
        $this->container['stellenziel'] = isset($data['stellenziel']) ? $data['stellenziel'] : null;
        $this->container['stellenziel_header'] = isset($data['stellenziel_header']) ? $data['stellenziel_header'] : null;
        $this->container['unternehmensbedeutung'] = isset($data['unternehmensbedeutung']) ? $data['unternehmensbedeutung'] : null;
        $this->container['unternehmensbedeutung_header'] = isset($data['unternehmensbedeutung_header']) ? $data['unternehmensbedeutung_header'] : null;
        $this->container['vakanzart'] = isset($data['vakanzart']) ? $data['vakanzart'] : null;
        $this->container['vakanzarten'] = isset($data['vakanzarten']) ? $data['vakanzarten'] : null;
        $this->container['vakanzen'] = isset($data['vakanzen']) ? $data['vakanzen'] : null;
        $this->container['vertragsart'] = isset($data['vertragsart']) ? $data['vertragsart'] : null;
        $this->container['vertragsarten'] = isset($data['vertragsarten']) ? $data['vertragsarten'] : null;
        $this->container['object_uuid'] = isset($data['object_uuid']) ? $data['object_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets abteilung
     *
     * @return string
     */
    public function getAbteilung()
    {
        return $this->container['abteilung'];
    }

    /**
     * Sets abteilung
     *
     * @param string $abteilung Die Abteilung
     *
     * @return $this
     */
    public function setAbteilung($abteilung)
    {
        $this->container['abteilung'] = $abteilung;

        return $this;
    }

    /**
     * Gets arbeitgeberleistung
     *
     * @return string
     */
    public function getArbeitgeberleistung()
    {
        return $this->container['arbeitgeberleistung'];
    }

    /**
     * Sets arbeitgeberleistung
     *
     * @param string $arbeitgeberleistung Die Arbeitgeberleistung
     *
     * @return $this
     */
    public function setArbeitgeberleistung($arbeitgeberleistung)
    {
        $this->container['arbeitgeberleistung'] = $arbeitgeberleistung;

        return $this;
    }

    /**
     * Gets arbeitgeberleistung_header
     *
     * @return string
     */
    public function getArbeitgeberleistungHeader()
    {
        return $this->container['arbeitgeberleistung_header'];
    }

    /**
     * Sets arbeitgeberleistung_header
     *
     * @param string $arbeitgeberleistung_header Die Überschrift zur Arbeitgeberleistung
     *
     * @return $this
     */
    public function setArbeitgeberleistungHeader($arbeitgeberleistung_header)
    {
        $this->container['arbeitgeberleistung_header'] = $arbeitgeberleistung_header;

        return $this;
    }

    /**
     * Gets arbeitgebervorstellung
     *
     * @return string
     */
    public function getArbeitgebervorstellung()
    {
        return $this->container['arbeitgebervorstellung'];
    }

    /**
     * Sets arbeitgebervorstellung
     *
     * @param string $arbeitgebervorstellung Die Arbeitgebervorstellung
     *
     * @return $this
     */
    public function setArbeitgebervorstellung($arbeitgebervorstellung)
    {
        $this->container['arbeitgebervorstellung'] = $arbeitgebervorstellung;

        return $this;
    }

    /**
     * Gets arbeitgebervorstellung_header
     *
     * @return string
     */
    public function getArbeitgebervorstellungHeader()
    {
        return $this->container['arbeitgebervorstellung_header'];
    }

    /**
     * Sets arbeitgebervorstellung_header
     *
     * @param string $arbeitgebervorstellung_header Die Überschrift zur Arbeitgebervorstellung
     *
     * @return $this
     */
    public function setArbeitgebervorstellungHeader($arbeitgebervorstellung_header)
    {
        $this->container['arbeitgebervorstellung_header'] = $arbeitgebervorstellung_header;

        return $this;
    }

    /**
     * Gets aufgaben
     *
     * @return string
     */
    public function getAufgaben()
    {
        return $this->container['aufgaben'];
    }

    /**
     * Sets aufgaben
     *
     * @param string $aufgaben Die Aufgaben
     *
     * @return $this
     */
    public function setAufgaben($aufgaben)
    {
        $this->container['aufgaben'] = $aufgaben;

        return $this;
    }

    /**
     * Gets aufgaben_header
     *
     * @return string
     */
    public function getAufgabenHeader()
    {
        return $this->container['aufgaben_header'];
    }

    /**
     * Sets aufgaben_header
     *
     * @param string $aufgaben_header Die Überschrift zu den Aufgaben
     *
     * @return $this
     */
    public function setAufgabenHeader($aufgaben_header)
    {
        $this->container['aufgaben_header'] = $aufgaben_header;

        return $this;
    }

    /**
     * Gets befristung
     *
     * @return \DateTime
     */
    public function getBefristung()
    {
        return $this->container['befristung'];
    }

    /**
     * Sets befristung
     *
     * @param \DateTime $befristung Die Befristung
     *
     * @return $this
     */
    public function setBefristung($befristung)
    {
        $this->container['befristung'] = $befristung;

        return $this;
    }

    /**
     * Gets befristungsgrund
     *
     * @return string
     */
    public function getBefristungsgrund()
    {
        return $this->container['befristungsgrund'];
    }

    /**
     * Sets befristungsgrund
     *
     * @param string $befristungsgrund Der Befristungsgrund
     *
     * @return $this
     */
    public function setBefristungsgrund($befristungsgrund)
    {
        $this->container['befristungsgrund'] = $befristungsgrund;

        return $this;
    }

    /**
     * Gets beginn
     *
     * @return \DateTime
     */
    public function getBeginn()
    {
        return $this->container['beginn'];
    }

    /**
     * Sets beginn
     *
     * @param \DateTime $beginn Der Beginn
     *
     * @return $this
     */
    public function setBeginn($beginn)
    {
        $this->container['beginn'] = $beginn;

        return $this;
    }

    /**
     * Gets beginn_ab_sofort
     *
     * @return bool
     */
    public function getBeginnAbSofort()
    {
        return $this->container['beginn_ab_sofort'];
    }

    /**
     * Sets beginn_ab_sofort
     *
     * @param bool $beginn_ab_sofort Wert, der angibt, ob die Stelle ab sofort beginnt.
     *
     * @return $this
     */
    public function setBeginnAbSofort($beginn_ab_sofort)
    {
        $this->container['beginn_ab_sofort'] = $beginn_ab_sofort;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Die Bezeichnung.
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets bezeichnung_ausschreibung
     *
     * @return string
     */
    public function getBezeichnungAusschreibung()
    {
        return $this->container['bezeichnung_ausschreibung'];
    }

    /**
     * Sets bezeichnung_ausschreibung
     *
     * @param string $bezeichnung_ausschreibung Der Titel für die Stellenanzeige
     *
     * @return $this
     */
    public function setBezeichnungAusschreibung($bezeichnung_ausschreibung)
    {
        $this->container['bezeichnung_ausschreibung'] = $bezeichnung_ausschreibung;

        return $this;
    }

    /**
     * Gets datum_ab
     *
     * @return \DateTime
     */
    public function getDatumAb()
    {
        return $this->container['datum_ab'];
    }

    /**
     * Sets datum_ab
     *
     * @param \DateTime $datum_ab datum_ab
     *
     * @return $this
     */
    public function setDatumAb($datum_ab)
    {
        $this->container['datum_ab'] = $datum_ab;

        return $this;
    }

    /**
     * Gets datum_bis
     *
     * @return \DateTime
     */
    public function getDatumBis()
    {
        return $this->container['datum_bis'];
    }

    /**
     * Sets datum_bis
     *
     * @param \DateTime $datum_bis Das Datum Veroeffentlicht bis
     *
     * @return $this
     */
    public function setDatumBis($datum_bis)
    {
        $this->container['datum_bis'] = $datum_bis;

        return $this;
    }

    /**
     * Gets einsatzort_geografische_breite
     *
     * @return float
     */
    public function getEinsatzortGeografischeBreite()
    {
        return $this->container['einsatzort_geografische_breite'];
    }

    /**
     * Sets einsatzort_geografische_breite
     *
     * @param float $einsatzort_geografische_breite Die geografische Breite des Einsatzortes
     *
     * @return $this
     */
    public function setEinsatzortGeografischeBreite($einsatzort_geografische_breite)
    {
        $this->container['einsatzort_geografische_breite'] = $einsatzort_geografische_breite;

        return $this;
    }

    /**
     * Gets einsatzort_geografische_laenge
     *
     * @return float
     */
    public function getEinsatzortGeografischeLaenge()
    {
        return $this->container['einsatzort_geografische_laenge'];
    }

    /**
     * Sets einsatzort_geografische_laenge
     *
     * @param float $einsatzort_geografische_laenge Die geografische Laenge des Einsatzortes
     *
     * @return $this
     */
    public function setEinsatzortGeografischeLaenge($einsatzort_geografische_laenge)
    {
        $this->container['einsatzort_geografische_laenge'] = $einsatzort_geografische_laenge;

        return $this;
    }

    /**
     * Gets einsatzort_land
     *
     * @return string
     */
    public function getEinsatzortLand()
    {
        return $this->container['einsatzort_land'];
    }

    /**
     * Sets einsatzort_land
     *
     * @param string $einsatzort_land Das Land des Einsatzortes
     *
     * @return $this
     */
    public function setEinsatzortLand($einsatzort_land)
    {
        $this->container['einsatzort_land'] = $einsatzort_land;

        return $this;
    }

    /**
     * Gets einsatzort_ort
     *
     * @return string
     */
    public function getEinsatzortOrt()
    {
        return $this->container['einsatzort_ort'];
    }

    /**
     * Sets einsatzort_ort
     *
     * @param string $einsatzort_ort Der Einsatzort
     *
     * @return $this
     */
    public function setEinsatzortOrt($einsatzort_ort)
    {
        $this->container['einsatzort_ort'] = $einsatzort_ort;

        return $this;
    }

    /**
     * Gets einsatzort_plz
     *
     * @return string
     */
    public function getEinsatzortPlz()
    {
        return $this->container['einsatzort_plz'];
    }

    /**
     * Sets einsatzort_plz
     *
     * @param string $einsatzort_plz Die Postleitzahl des Einsatzortes
     *
     * @return $this
     */
    public function setEinsatzortPlz($einsatzort_plz)
    {
        $this->container['einsatzort_plz'] = $einsatzort_plz;

        return $this;
    }

    /**
     * Gets fachliche_anforderungen
     *
     * @return string
     */
    public function getFachlicheAnforderungen()
    {
        return $this->container['fachliche_anforderungen'];
    }

    /**
     * Sets fachliche_anforderungen
     *
     * @param string $fachliche_anforderungen Die fachlichen Anforderungen
     *
     * @return $this
     */
    public function setFachlicheAnforderungen($fachliche_anforderungen)
    {
        $this->container['fachliche_anforderungen'] = $fachliche_anforderungen;

        return $this;
    }

    /**
     * Gets fachliche_anforderungen_header
     *
     * @return string
     */
    public function getFachlicheAnforderungenHeader()
    {
        return $this->container['fachliche_anforderungen_header'];
    }

    /**
     * Sets fachliche_anforderungen_header
     *
     * @param string $fachliche_anforderungen_header Die Überschrift für die fachlichen Anforderungen
     *
     * @return $this
     */
    public function setFachlicheAnforderungenHeader($fachliche_anforderungen_header)
    {
        $this->container['fachliche_anforderungen_header'] = $fachliche_anforderungen_header;

        return $this;
    }

    /**
     * Gets image1_uuid
     *
     * @return string
     */
    public function getImage1Uuid()
    {
        return $this->container['image1_uuid'];
    }

    /**
     * Sets image1_uuid
     *
     * @param string $image1_uuid Die Uuid des Image1
     *
     * @return $this
     */
    public function setImage1Uuid($image1_uuid)
    {
        $this->container['image1_uuid'] = $image1_uuid;

        return $this;
    }

    /**
     * Gets image_kontakt_uuid
     *
     * @return string
     */
    public function getImageKontaktUuid()
    {
        return $this->container['image_kontakt_uuid'];
    }

    /**
     * Sets image_kontakt_uuid
     *
     * @param string $image_kontakt_uuid Die Uuid des Kontaktbildes
     *
     * @return $this
     */
    public function setImageKontaktUuid($image_kontakt_uuid)
    {
        $this->container['image_kontakt_uuid'] = $image_kontakt_uuid;

        return $this;
    }

    /**
     * Gets kontakt_text
     *
     * @return string
     */
    public function getKontaktText()
    {
        return $this->container['kontakt_text'];
    }

    /**
     * Sets kontakt_text
     *
     * @param string $kontakt_text Der Text mit Kontaktinformationen
     *
     * @return $this
     */
    public function setKontaktText($kontakt_text)
    {
        $this->container['kontakt_text'] = $kontakt_text;

        return $this;
    }

    /**
     * Gets kontakt_text_header
     *
     * @return string
     */
    public function getKontaktTextHeader()
    {
        return $this->container['kontakt_text_header'];
    }

    /**
     * Sets kontakt_text_header
     *
     * @param string $kontakt_text_header Die Überschrift für den Kontakttext
     *
     * @return $this
     */
    public function setKontaktTextHeader($kontakt_text_header)
    {
        $this->container['kontakt_text_header'] = $kontakt_text_header;

        return $this;
    }

    /**
     * Gets logo1_uuid
     *
     * @return string
     */
    public function getLogo1Uuid()
    {
        return $this->container['logo1_uuid'];
    }

    /**
     * Sets logo1_uuid
     *
     * @param string $logo1_uuid Die Uuid für das Logo1
     *
     * @return $this
     */
    public function setLogo1Uuid($logo1_uuid)
    {
        $this->container['logo1_uuid'] = $logo1_uuid;

        return $this;
    }

    /**
     * Gets mandant
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\PublicStelleMandantReadOnlyDto
     */
    public function getMandant()
    {
        return $this->container['mandant'];
    }

    /**
     * Sets mandant
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleMandantReadOnlyDto $mandant mandant
     *
     * @return $this
     */
    public function setMandant($mandant)
    {
        $this->container['mandant'] = $mandant;

        return $this;
    }

    /**
     * Gets persoenliche_anforderungen
     *
     * @return string
     */
    public function getPersoenlicheAnforderungen()
    {
        return $this->container['persoenliche_anforderungen'];
    }

    /**
     * Sets persoenliche_anforderungen
     *
     * @param string $persoenliche_anforderungen Die persoenlichen Anforderungen
     *
     * @return $this
     */
    public function setPersoenlicheAnforderungen($persoenliche_anforderungen)
    {
        $this->container['persoenliche_anforderungen'] = $persoenliche_anforderungen;

        return $this;
    }

    /**
     * Gets persoenliche_anforderungen_header
     *
     * @return string
     */
    public function getPersoenlicheAnforderungenHeader()
    {
        return $this->container['persoenliche_anforderungen_header'];
    }

    /**
     * Sets persoenliche_anforderungen_header
     *
     * @param string $persoenliche_anforderungen_header Die Überschrift für die persönlichen Anforderungen
     *
     * @return $this
     */
    public function setPersoenlicheAnforderungenHeader($persoenliche_anforderungen_header)
    {
        $this->container['persoenliche_anforderungen_header'] = $persoenliche_anforderungen_header;

        return $this;
    }

    /**
     * Gets perspektiven
     *
     * @return string
     */
    public function getPerspektiven()
    {
        return $this->container['perspektiven'];
    }

    /**
     * Sets perspektiven
     *
     * @param string $perspektiven Die Perspektiven
     *
     * @return $this
     */
    public function setPerspektiven($perspektiven)
    {
        $this->container['perspektiven'] = $perspektiven;

        return $this;
    }

    /**
     * Gets perspektiven_header
     *
     * @return string
     */
    public function getPerspektivenHeader()
    {
        return $this->container['perspektiven_header'];
    }

    /**
     * Sets perspektiven_header
     *
     * @param string $perspektiven_header Die Überschrift für die Perspektiven
     *
     * @return $this
     */
    public function setPerspektivenHeader($perspektiven_header)
    {
        $this->container['perspektiven_header'] = $perspektiven_header;

        return $this;
    }

    /**
     * Gets stelle_bewerbung_url
     *
     * @return string
     */
    public function getStelleBewerbungUrl()
    {
        return $this->container['stelle_bewerbung_url'];
    }

    /**
     * Sets stelle_bewerbung_url
     *
     * @param string $stelle_bewerbung_url Die Url zum Bewerbungsformular der Stelle
     *
     * @return $this
     */
    public function setStelleBewerbungUrl($stelle_bewerbung_url)
    {
        $this->container['stelle_bewerbung_url'] = $stelle_bewerbung_url;

        return $this;
    }

    /**
     * Gets stellen_id
     *
     * @return string
     */
    public function getStellenId()
    {
        return $this->container['stellen_id'];
    }

    /**
     * Sets stellen_id
     *
     * @param string $stellen_id Die StellenID
     *
     * @return $this
     */
    public function setStellenId($stellen_id)
    {
        $this->container['stellen_id'] = $stellen_id;

        return $this;
    }

    /**
     * Gets stellenziel
     *
     * @return string
     */
    public function getStellenziel()
    {
        return $this->container['stellenziel'];
    }

    /**
     * Sets stellenziel
     *
     * @param string $stellenziel Das Stellenziel
     *
     * @return $this
     */
    public function setStellenziel($stellenziel)
    {
        $this->container['stellenziel'] = $stellenziel;

        return $this;
    }

    /**
     * Gets stellenziel_header
     *
     * @return string
     */
    public function getStellenzielHeader()
    {
        return $this->container['stellenziel_header'];
    }

    /**
     * Sets stellenziel_header
     *
     * @param string $stellenziel_header Die Überschrift zum Stellenziel
     *
     * @return $this
     */
    public function setStellenzielHeader($stellenziel_header)
    {
        $this->container['stellenziel_header'] = $stellenziel_header;

        return $this;
    }

    /**
     * Gets unternehmensbedeutung
     *
     * @return string
     */
    public function getUnternehmensbedeutung()
    {
        return $this->container['unternehmensbedeutung'];
    }

    /**
     * Sets unternehmensbedeutung
     *
     * @param string $unternehmensbedeutung Die Unternehmensbedeutung
     *
     * @return $this
     */
    public function setUnternehmensbedeutung($unternehmensbedeutung)
    {
        $this->container['unternehmensbedeutung'] = $unternehmensbedeutung;

        return $this;
    }

    /**
     * Gets unternehmensbedeutung_header
     *
     * @return string
     */
    public function getUnternehmensbedeutungHeader()
    {
        return $this->container['unternehmensbedeutung_header'];
    }

    /**
     * Sets unternehmensbedeutung_header
     *
     * @param string $unternehmensbedeutung_header Die Überschrift für die Unternehmensbedeutung
     *
     * @return $this
     */
    public function setUnternehmensbedeutungHeader($unternehmensbedeutung_header)
    {
        $this->container['unternehmensbedeutung_header'] = $unternehmensbedeutung_header;

        return $this;
    }

    /**
     * Gets vakanzart
     *
     * @return string
     */
    public function getVakanzart()
    {
        return $this->container['vakanzart'];
    }

    /**
     * Sets vakanzart
     *
     * @param string $vakanzart Die Vakanzart
     *
     * @return $this
     */
    public function setVakanzart($vakanzart)
    {
        $this->container['vakanzart'] = $vakanzart;

        return $this;
    }

    /**
     * Gets vakanzarten
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto[]
     */
    public function getVakanzarten()
    {
        return $this->container['vakanzarten'];
    }

    /**
     * Sets vakanzarten
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto[] $vakanzarten Die Vakanzarten
     *
     * @return $this
     */
    public function setVakanzarten($vakanzarten)
    {
        $this->container['vakanzarten'] = $vakanzarten;

        return $this;
    }

    /**
     * Gets vakanzen
     *
     * @return float
     */
    public function getVakanzen()
    {
        return $this->container['vakanzen'];
    }

    /**
     * Sets vakanzen
     *
     * @param float $vakanzen Die Vakanzen
     *
     * @return $this
     */
    public function setVakanzen($vakanzen)
    {
        $this->container['vakanzen'] = $vakanzen;

        return $this;
    }

    /**
     * Gets vertragsart
     *
     * @return string
     */
    public function getVertragsart()
    {
        return $this->container['vertragsart'];
    }

    /**
     * Sets vertragsart
     *
     * @param string $vertragsart Die Vertragsarten
     *
     * @return $this
     */
    public function setVertragsart($vertragsart)
    {
        $this->container['vertragsart'] = $vertragsart;

        return $this;
    }

    /**
     * Gets vertragsarten
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto[]
     */
    public function getVertragsarten()
    {
        return $this->container['vertragsarten'];
    }

    /**
     * Sets vertragsarten
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto[] $vertragsarten Die Vertragsarten
     *
     * @return $this
     */
    public function setVertragsarten($vertragsarten)
    {
        $this->container['vertragsarten'] = $vertragsarten;

        return $this;
    }

    /**
     * Gets object_uuid
     *
     * @return string
     */
    public function getObjectUuid()
    {
        return $this->container['object_uuid'];
    }

    /**
     * Sets object_uuid
     *
     * @param string $object_uuid Die Object-Uuid
     *
     * @return $this
     */
    public function setObjectUuid($object_uuid)
    {
        $this->container['object_uuid'] = $object_uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

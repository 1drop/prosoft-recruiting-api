<?php
/**
 * BewerbungDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * BewerbungDto Class Doc Comment
 *
 * @category    Class
 * @description Die Bewerbungsdaten
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BewerbungDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'BewerbungDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'arbeitsstunden'          => 'double',
        'arbeitsstunden_bis'      => 'double',
        'arbeitsstunden_zeitraum' => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'berufserfahrung'         => 'double',
        'bewerbungsdatum'         => '\DateTime',
        'beworben_als'            => 'string',
        'eintritt_ab'             => '\DateTime',
        'gehalt'                  => 'double',
        'gehalt_waehrung'         => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'gehalt_zeitraum'         => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'ist_initiativ'           => 'bool',
        'mandant'                 => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'quelle'                  => '\Prosoft\RecruitingApi\Api\Dto\LookupDto',
        'quelle_freitext'         => 'string',
        'stelle'                  => '\Prosoft\RecruitingApi\Api\Dto\BewerbungStelleMandantLookupDto',
        'verfuegbar_bis'          => '\DateTime',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'arbeitsstunden'          => 'double',
        'arbeitsstunden_bis'      => 'double',
        'arbeitsstunden_zeitraum' => null,
        'berufserfahrung'         => 'double',
        'bewerbungsdatum'         => 'date-time',
        'beworben_als'            => null,
        'eintritt_ab'             => 'date-time',
        'gehalt'                  => 'double',
        'gehalt_waehrung'         => null,
        'gehalt_zeitraum'         => null,
        'ist_initiativ'           => null,
        'mandant'                 => null,
        'quelle'                  => null,
        'quelle_freitext'         => null,
        'stelle'                  => null,
        'verfuegbar_bis'          => 'date-time',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arbeitsstunden'          => 'Arbeitsstunden',
        'arbeitsstunden_bis'      => 'ArbeitsstundenBis',
        'arbeitsstunden_zeitraum' => 'ArbeitsstundenZeitraum',
        'berufserfahrung'         => 'Berufserfahrung',
        'bewerbungsdatum'         => 'Bewerbungsdatum',
        'beworben_als'            => 'BeworbenAls',
        'eintritt_ab'             => 'EintrittAb',
        'gehalt'                  => 'Gehalt',
        'gehalt_waehrung'         => 'GehaltWaehrung',
        'gehalt_zeitraum'         => 'GehaltZeitraum',
        'ist_initiativ'           => 'IstInitiativ',
        'mandant'                 => 'Mandant',
        'quelle'                  => 'Quelle',
        'quelle_freitext'         => 'QuelleFreitext',
        'stelle'                  => 'Stelle',
        'verfuegbar_bis'          => 'VerfuegbarBis',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arbeitsstunden'          => 'setArbeitsstunden',
        'arbeitsstunden_bis'      => 'setArbeitsstundenBis',
        'arbeitsstunden_zeitraum' => 'setArbeitsstundenZeitraum',
        'berufserfahrung'         => 'setBerufserfahrung',
        'bewerbungsdatum'         => 'setBewerbungsdatum',
        'beworben_als'            => 'setBeworbenAls',
        'eintritt_ab'             => 'setEintrittAb',
        'gehalt'                  => 'setGehalt',
        'gehalt_waehrung'         => 'setGehaltWaehrung',
        'gehalt_zeitraum'         => 'setGehaltZeitraum',
        'ist_initiativ'           => 'setIstInitiativ',
        'mandant'                 => 'setMandant',
        'quelle'                  => 'setQuelle',
        'quelle_freitext'         => 'setQuelleFreitext',
        'stelle'                  => 'setStelle',
        'verfuegbar_bis'          => 'setVerfuegbarBis',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arbeitsstunden'          => 'getArbeitsstunden',
        'arbeitsstunden_bis'      => 'getArbeitsstundenBis',
        'arbeitsstunden_zeitraum' => 'getArbeitsstundenZeitraum',
        'berufserfahrung'         => 'getBerufserfahrung',
        'bewerbungsdatum'         => 'getBewerbungsdatum',
        'beworben_als'            => 'getBeworbenAls',
        'eintritt_ab'             => 'getEintrittAb',
        'gehalt'                  => 'getGehalt',
        'gehalt_waehrung'         => 'getGehaltWaehrung',
        'gehalt_zeitraum'         => 'getGehaltZeitraum',
        'ist_initiativ'           => 'getIstInitiativ',
        'mandant'                 => 'getMandant',
        'quelle'                  => 'getQuelle',
        'quelle_freitext'         => 'getQuelleFreitext',
        'stelle'                  => 'getStelle',
        'verfuegbar_bis'          => 'getVerfuegbarBis',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arbeitsstunden'] = isset($data['arbeitsstunden']) ? $data['arbeitsstunden'] : null;
        $this->container['arbeitsstunden_bis'] = isset($data['arbeitsstunden_bis']) ? $data['arbeitsstunden_bis'] : null;
        $this->container['arbeitsstunden_zeitraum'] = isset($data['arbeitsstunden_zeitraum']) ? $data['arbeitsstunden_zeitraum'] : null;
        $this->container['berufserfahrung'] = isset($data['berufserfahrung']) ? $data['berufserfahrung'] : null;
        $this->container['bewerbungsdatum'] = isset($data['bewerbungsdatum']) ? $data['bewerbungsdatum'] : null;
        $this->container['beworben_als'] = isset($data['beworben_als']) ? $data['beworben_als'] : null;
        $this->container['eintritt_ab'] = isset($data['eintritt_ab']) ? $data['eintritt_ab'] : null;
        $this->container['gehalt'] = isset($data['gehalt']) ? $data['gehalt'] : null;
        $this->container['gehalt_waehrung'] = isset($data['gehalt_waehrung']) ? $data['gehalt_waehrung'] : null;
        $this->container['gehalt_zeitraum'] = isset($data['gehalt_zeitraum']) ? $data['gehalt_zeitraum'] : null;
        $this->container['ist_initiativ'] = isset($data['ist_initiativ']) ? $data['ist_initiativ'] : null;
        $this->container['mandant'] = isset($data['mandant']) ? $data['mandant'] : null;
        $this->container['quelle'] = isset($data['quelle']) ? $data['quelle'] : null;
        $this->container['quelle_freitext'] = isset($data['quelle_freitext']) ? $data['quelle_freitext'] : null;
        $this->container['stelle'] = isset($data['stelle']) ? $data['stelle'] : null;
        $this->container['verfuegbar_bis'] = isset($data['verfuegbar_bis']) ? $data['verfuegbar_bis'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets arbeitsstunden
     *
     * @return float
     */
    public function getArbeitsstunden()
    {
        return $this->container['arbeitsstunden'];
    }

    /**
     * Sets arbeitsstunden
     *
     * @param float $arbeitsstunden Die Arbeitsstunden
     *
     * @return $this
     */
    public function setArbeitsstunden($arbeitsstunden)
    {
        $this->container['arbeitsstunden'] = $arbeitsstunden;

        return $this;
    }

    /**
     * Gets arbeitsstunden_bis
     *
     * @return float
     */
    public function getArbeitsstundenBis()
    {
        return $this->container['arbeitsstunden_bis'];
    }

    /**
     * Sets arbeitsstunden_bis
     *
     * @param float $arbeitsstunden_bis Die Arbeitsstunden bis
     *
     * @return $this
     */
    public function setArbeitsstundenBis($arbeitsstunden_bis)
    {
        $this->container['arbeitsstunden_bis'] = $arbeitsstunden_bis;

        return $this;
    }

    /**
     * Gets arbeitsstunden_zeitraum
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getArbeitsstundenZeitraum()
    {
        return $this->container['arbeitsstunden_zeitraum'];
    }

    /**
     * Sets arbeitsstunden_zeitraum
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $arbeitsstunden_zeitraum arbeitsstunden_zeitraum
     *
     * @return $this
     */
    public function setArbeitsstundenZeitraum($arbeitsstunden_zeitraum)
    {
        $this->container['arbeitsstunden_zeitraum'] = $arbeitsstunden_zeitraum;

        return $this;
    }

    /**
     * Gets berufserfahrung
     *
     * @return float
     */
    public function getBerufserfahrung()
    {
        return $this->container['berufserfahrung'];
    }

    /**
     * Sets berufserfahrung
     *
     * @param float $berufserfahrung Die Berufserfahrung (in Jahren)
     *
     * @return $this
     */
    public function setBerufserfahrung($berufserfahrung)
    {
        $this->container['berufserfahrung'] = $berufserfahrung;

        return $this;
    }

    /**
     * Gets bewerbungsdatum
     *
     * @return \DateTime
     */
    public function getBewerbungsdatum()
    {
        return $this->container['bewerbungsdatum'];
    }

    /**
     * Sets bewerbungsdatum
     *
     * @param \DateTime $bewerbungsdatum Das Bewerbungsdatum
     *
     * @return $this
     */
    public function setBewerbungsdatum($bewerbungsdatum)
    {
        $this->container['bewerbungsdatum'] = $bewerbungsdatum;

        return $this;
    }

    /**
     * Gets beworben_als
     *
     * @return string
     */
    public function getBeworbenAls()
    {
        return $this->container['beworben_als'];
    }

    /**
     * Sets beworben_als
     *
     * @param string $beworben_als \"beworben als\"
     *
     * @return $this
     */
    public function setBeworbenAls($beworben_als)
    {
        $this->container['beworben_als'] = $beworben_als;

        return $this;
    }

    /**
     * Gets eintritt_ab
     *
     * @return \DateTime
     */
    public function getEintrittAb()
    {
        return $this->container['eintritt_ab'];
    }

    /**
     * Sets eintritt_ab
     *
     * @param \DateTime $eintritt_ab Das Eintrittsdatum
     *
     * @return $this
     */
    public function setEintrittAb($eintritt_ab)
    {
        $this->container['eintritt_ab'] = $eintritt_ab;

        return $this;
    }

    /**
     * Gets gehalt
     *
     * @return float
     */
    public function getGehalt()
    {
        return $this->container['gehalt'];
    }

    /**
     * Sets gehalt
     *
     * @param float $gehalt Das Gehalt
     *
     * @return $this
     */
    public function setGehalt($gehalt)
    {
        $this->container['gehalt'] = $gehalt;

        return $this;
    }

    /**
     * Gets gehalt_waehrung
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getGehaltWaehrung()
    {
        return $this->container['gehalt_waehrung'];
    }

    /**
     * Sets gehalt_waehrung
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $gehalt_waehrung gehalt_waehrung
     *
     * @return $this
     */
    public function setGehaltWaehrung($gehalt_waehrung)
    {
        $this->container['gehalt_waehrung'] = $gehalt_waehrung;

        return $this;
    }

    /**
     * Gets gehalt_zeitraum
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getGehaltZeitraum()
    {
        return $this->container['gehalt_zeitraum'];
    }

    /**
     * Sets gehalt_zeitraum
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $gehalt_zeitraum gehalt_zeitraum
     *
     * @return $this
     */
    public function setGehaltZeitraum($gehalt_zeitraum)
    {
        $this->container['gehalt_zeitraum'] = $gehalt_zeitraum;

        return $this;
    }

    /**
     * Gets ist_initiativ
     *
     * @return bool
     */
    public function getIstInitiativ()
    {
        return $this->container['ist_initiativ'];
    }

    /**
     * Sets ist_initiativ
     *
     * @param bool $ist_initiativ true, wenn es sich um eine Initiativbewerbung handelt, sonst false
     *
     * @return $this
     */
    public function setIstInitiativ($ist_initiativ)
    {
        $this->container['ist_initiativ'] = $ist_initiativ;

        return $this;
    }

    /**
     * Gets mandant
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getMandant()
    {
        return $this->container['mandant'];
    }

    /**
     * Sets mandant
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $mandant mandant
     *
     * @return $this
     */
    public function setMandant($mandant)
    {
        $this->container['mandant'] = $mandant;

        return $this;
    }

    /**
     * Gets quelle
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\LookupDto
     */
    public function getQuelle()
    {
        return $this->container['quelle'];
    }

    /**
     * Sets quelle
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\LookupDto $quelle quelle
     *
     * @return $this
     */
    public function setQuelle($quelle)
    {
        $this->container['quelle'] = $quelle;

        return $this;
    }

    /**
     * Gets quelle_freitext
     *
     * @return string
     */
    public function getQuelleFreitext()
    {
        return $this->container['quelle_freitext'];
    }

    /**
     * Sets quelle_freitext
     *
     * @param string $quelle_freitext Freitext zur Quelle
     *
     * @return $this
     */
    public function setQuelleFreitext($quelle_freitext)
    {
        $this->container['quelle_freitext'] = $quelle_freitext;

        return $this;
    }

    /**
     * Gets stelle
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\BewerbungStelleMandantLookupDto
     */
    public function getStelle()
    {
        return $this->container['stelle'];
    }

    /**
     * Sets stelle
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\BewerbungStelleMandantLookupDto $stelle stelle
     *
     * @return $this
     */
    public function setStelle($stelle)
    {
        $this->container['stelle'] = $stelle;

        return $this;
    }

    /**
     * Gets verfuegbar_bis
     *
     * @return \DateTime
     */
    public function getVerfuegbarBis()
    {
        return $this->container['verfuegbar_bis'];
    }

    /**
     * Sets verfuegbar_bis
     *
     * @param \DateTime $verfuegbar_bis Das Datum, bis wann der Bewerber verfügbar ist
     *
     * @return $this
     */
    public function setVerfuegbarBis($verfuegbar_bis)
    {
        $this->container['verfuegbar_bis'] = $verfuegbar_bis;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

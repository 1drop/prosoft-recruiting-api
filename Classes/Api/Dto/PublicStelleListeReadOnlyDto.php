<?php
/**
 * PublicStelleListeReadOnlyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * PublicStelleListeReadOnlyDto Class Doc Comment
 *
 * @category    Class
 * @description Die Daten einer Stelle in der Stellenliste
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PublicStelleListeReadOnlyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PublicStelleListeReadOnlyDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'abteilung'               => 'string',
        'beginn'                  => '\DateTime',
        'beginn_ab_sofort'        => 'bool',
        'bezeichnung'             => 'string',
        'datum_ab'                => '\DateTime',
        'einsatzort_geo_location' => '\Prosoft\RecruitingApi\Api\Dto\PublicStelleGeoLocationDto',
        'einsatzort_ort'          => 'string',
        'einsatzort_plz'          => 'string',
        'entfernung'              => 'double',
        'link_slug'               => 'string',
        'mandant_uuid'            => 'string',
        'stellen_id'              => 'string',
        'stelle_uuid'             => 'string',
        'vakanzarten'             => 'string',
        'vertragsarten'           => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'abteilung'               => null,
        'beginn'                  => 'date-time',
        'beginn_ab_sofort'        => null,
        'bezeichnung'             => null,
        'datum_ab'                => 'date-time',
        'einsatzort_geo_location' => null,
        'einsatzort_ort'          => null,
        'einsatzort_plz'          => null,
        'entfernung'              => 'double',
        'link_slug'               => null,
        'mandant_uuid'            => 'uuid',
        'stellen_id'              => null,
        'stelle_uuid'             => 'uuid',
        'vakanzarten'             => null,
        'vertragsarten'           => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abteilung'               => 'Abteilung',
        'beginn'                  => 'Beginn',
        'beginn_ab_sofort'        => 'BeginnAbSofort',
        'bezeichnung'             => 'Bezeichnung',
        'datum_ab'                => 'DatumAb',
        'einsatzort_geo_location' => 'EinsatzortGeoLocation',
        'einsatzort_ort'          => 'EinsatzortOrt',
        'einsatzort_plz'          => 'EinsatzortPlz',
        'entfernung'              => 'Entfernung',
        'link_slug'               => 'LinkSlug',
        'mandant_uuid'            => 'MandantUuid',
        'stellen_id'              => 'StellenID',
        'stelle_uuid'             => 'StelleUuid',
        'vakanzarten'             => 'Vakanzarten',
        'vertragsarten'           => 'Vertragsarten',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abteilung'               => 'setAbteilung',
        'beginn'                  => 'setBeginn',
        'beginn_ab_sofort'        => 'setBeginnAbSofort',
        'bezeichnung'             => 'setBezeichnung',
        'datum_ab'                => 'setDatumAb',
        'einsatzort_geo_location' => 'setEinsatzortGeoLocation',
        'einsatzort_ort'          => 'setEinsatzortOrt',
        'einsatzort_plz'          => 'setEinsatzortPlz',
        'entfernung'              => 'setEntfernung',
        'link_slug'               => 'setLinkSlug',
        'mandant_uuid'            => 'setMandantUuid',
        'stellen_id'              => 'setStellenId',
        'stelle_uuid'             => 'setStelleUuid',
        'vakanzarten'             => 'setVakanzarten',
        'vertragsarten'           => 'setVertragsarten',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abteilung'               => 'getAbteilung',
        'beginn'                  => 'getBeginn',
        'beginn_ab_sofort'        => 'getBeginnAbSofort',
        'bezeichnung'             => 'getBezeichnung',
        'datum_ab'                => 'getDatumAb',
        'einsatzort_geo_location' => 'getEinsatzortGeoLocation',
        'einsatzort_ort'          => 'getEinsatzortOrt',
        'einsatzort_plz'          => 'getEinsatzortPlz',
        'entfernung'              => 'getEntfernung',
        'link_slug'               => 'getLinkSlug',
        'mandant_uuid'            => 'getMandantUuid',
        'stellen_id'              => 'getStellenId',
        'stelle_uuid'             => 'getStelleUuid',
        'vakanzarten'             => 'getVakanzarten',
        'vertragsarten'           => 'getVertragsarten',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abteilung'] = isset($data['abteilung']) ? $data['abteilung'] : null;
        $this->container['beginn'] = isset($data['beginn']) ? $data['beginn'] : null;
        $this->container['beginn_ab_sofort'] = isset($data['beginn_ab_sofort']) ? $data['beginn_ab_sofort'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['datum_ab'] = isset($data['datum_ab']) ? $data['datum_ab'] : null;
        $this->container['einsatzort_geo_location'] = isset($data['einsatzort_geo_location']) ? $data['einsatzort_geo_location'] : null;
        $this->container['einsatzort_ort'] = isset($data['einsatzort_ort']) ? $data['einsatzort_ort'] : null;
        $this->container['einsatzort_plz'] = isset($data['einsatzort_plz']) ? $data['einsatzort_plz'] : null;
        $this->container['entfernung'] = isset($data['entfernung']) ? $data['entfernung'] : null;
        $this->container['link_slug'] = isset($data['link_slug']) ? $data['link_slug'] : null;
        $this->container['mandant_uuid'] = isset($data['mandant_uuid']) ? $data['mandant_uuid'] : null;
        $this->container['stellen_id'] = isset($data['stellen_id']) ? $data['stellen_id'] : null;
        $this->container['stelle_uuid'] = isset($data['stelle_uuid']) ? $data['stelle_uuid'] : null;
        $this->container['vakanzarten'] = isset($data['vakanzarten']) ? $data['vakanzarten'] : null;
        $this->container['vertragsarten'] = isset($data['vertragsarten']) ? $data['vertragsarten'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets abteilung
     *
     * @return string
     */
    public function getAbteilung()
    {
        return $this->container['abteilung'];
    }

    /**
     * Sets abteilung
     *
     * @param string $abteilung Die Abteilung
     *
     * @return $this
     */
    public function setAbteilung($abteilung)
    {
        $this->container['abteilung'] = $abteilung;

        return $this;
    }

    /**
     * Gets beginn
     *
     * @return \DateTime
     */
    public function getBeginn()
    {
        return $this->container['beginn'];
    }

    /**
     * Sets beginn
     *
     * @param \DateTime $beginn Das Datum des Beginns
     *
     * @return $this
     */
    public function setBeginn($beginn)
    {
        $this->container['beginn'] = $beginn;

        return $this;
    }

    /**
     * Gets beginn_ab_sofort
     *
     * @return bool
     */
    public function getBeginnAbSofort()
    {
        return $this->container['beginn_ab_sofort'];
    }

    /**
     * Sets beginn_ab_sofort
     *
     * @param bool $beginn_ab_sofort Wert, der angibt, ob die Stelle ab sofort beginnt.
     *
     * @return $this
     */
    public function setBeginnAbSofort($beginn_ab_sofort)
    {
        $this->container['beginn_ab_sofort'] = $beginn_ab_sofort;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Die Bezeichnung.
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets datum_ab
     *
     * @return \DateTime
     */
    public function getDatumAb()
    {
        return $this->container['datum_ab'];
    }

    /**
     * Sets datum_ab
     *
     * @param \DateTime $datum_ab Das Datum ab dem die Stelle veröffentlicht wurde
     *
     * @return $this
     */
    public function setDatumAb($datum_ab)
    {
        $this->container['datum_ab'] = $datum_ab;

        return $this;
    }

    /**
     * Gets einsatzort_geo_location
     *
     * @return \Prosoft\RecruitingApi\Api\Dto\PublicStelleGeoLocationDto
     */
    public function getEinsatzortGeoLocation()
    {
        return $this->container['einsatzort_geo_location'];
    }

    /**
     * Sets einsatzort_geo_location
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleGeoLocationDto $einsatzort_geo_location einsatzort_geo_location
     *
     * @return $this
     */
    public function setEinsatzortGeoLocation($einsatzort_geo_location)
    {
        $this->container['einsatzort_geo_location'] = $einsatzort_geo_location;

        return $this;
    }

    /**
     * Gets einsatzort_ort
     *
     * @return string
     */
    public function getEinsatzortOrt()
    {
        return $this->container['einsatzort_ort'];
    }

    /**
     * Sets einsatzort_ort
     *
     * @param string $einsatzort_ort Der Einsatzort
     *
     * @return $this
     */
    public function setEinsatzortOrt($einsatzort_ort)
    {
        $this->container['einsatzort_ort'] = $einsatzort_ort;

        return $this;
    }

    /**
     * Gets einsatzort_plz
     *
     * @return string
     */
    public function getEinsatzortPlz()
    {
        return $this->container['einsatzort_plz'];
    }

    /**
     * Sets einsatzort_plz
     *
     * @param string $einsatzort_plz Die PLZ des Einsatzortes
     *
     * @return $this
     */
    public function setEinsatzortPlz($einsatzort_plz)
    {
        $this->container['einsatzort_plz'] = $einsatzort_plz;

        return $this;
    }

    /**
     * Gets entfernung
     *
     * @return float
     */
    public function getEntfernung()
    {
        return $this->container['entfernung'];
    }

    /**
     * Sets entfernung
     *
     * @param float $entfernung Die bei der Umkreissuche ermittelte Distanz zum Standort in km
     *
     * @return $this
     */
    public function setEntfernung($entfernung)
    {
        $this->container['entfernung'] = $entfernung;

        return $this;
    }

    /**
     * Gets link_slug
     *
     * @return string
     */
    public function getLinkSlug()
    {
        return $this->container['link_slug'];
    }

    /**
     * Sets link_slug
     *
     * @param string $link_slug Der Link-Slug der Stelle
     *
     * @return $this
     */
    public function setLinkSlug($link_slug)
    {
        $this->container['link_slug'] = $link_slug;

        return $this;
    }

    /**
     * Gets mandant_uuid
     *
     * @return string
     */
    public function getMandantUuid()
    {
        return $this->container['mandant_uuid'];
    }

    /**
     * Sets mandant_uuid
     *
     * @param string $mandant_uuid Die Object-UUID des Mandanten
     *
     * @return $this
     */
    public function setMandantUuid($mandant_uuid)
    {
        $this->container['mandant_uuid'] = $mandant_uuid;

        return $this;
    }

    /**
     * Gets stellen_id
     *
     * @return string
     */
    public function getStellenId()
    {
        return $this->container['stellen_id'];
    }

    /**
     * Sets stellen_id
     *
     * @param string $stellen_id Die StellenID
     *
     * @return $this
     */
    public function setStellenId($stellen_id)
    {
        $this->container['stellen_id'] = $stellen_id;

        return $this;
    }

    /**
     * Gets stelle_uuid
     *
     * @return string
     */
    public function getStelleUuid()
    {
        return $this->container['stelle_uuid'];
    }

    /**
     * Sets stelle_uuid
     *
     * @param string $stelle_uuid Die Object-UUID der Stelle
     *
     * @return $this
     */
    public function setStelleUuid($stelle_uuid)
    {
        $this->container['stelle_uuid'] = $stelle_uuid;

        return $this;
    }

    /**
     * Gets vakanzarten
     *
     * @return string
     */
    public function getVakanzarten()
    {
        return $this->container['vakanzarten'];
    }

    /**
     * Sets vakanzarten
     *
     * @param string $vakanzarten Die Vakanzarten
     *
     * @return $this
     */
    public function setVakanzarten($vakanzarten)
    {
        $this->container['vakanzarten'] = $vakanzarten;

        return $this;
    }

    /**
     * Gets vertragsarten
     *
     * @return string
     */
    public function getVertragsarten()
    {
        return $this->container['vertragsarten'];
    }

    /**
     * Sets vertragsarten
     *
     * @param string $vertragsarten Die Vertragsarten
     *
     * @return $this
     */
    public function setVertragsarten($vertragsarten)
    {
        $this->container['vertragsarten'] = $vertragsarten;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

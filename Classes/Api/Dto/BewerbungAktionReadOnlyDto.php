<?php
/**
 * BewerbungAktionReadOnlyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Dto;

use ArrayAccess;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * BewerbungAktionReadOnlyDto Class Doc Comment
 *
 * @category    Class
 * @description Implementiert Methoden und Eigenschaften fÃ¼r BewerbungAktion
 * @package     Prosoft\RecruitingApi\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BewerbungAktionReadOnlyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'BewerbungAktionReadOnlyDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'entity_name'           => 'string',
        'protokoll_entity_uuid' => 'string',
        'ausgabe_user'          => 'string',
        'bezeichnung'           => 'string',
        'execution_time'        => '\DateTime',
        'object_uuid'           => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'entity_name'           => null,
        'protokoll_entity_uuid' => 'uuid',
        'ausgabe_user'          => null,
        'bezeichnung'           => null,
        'execution_time'        => 'date-time',
        'object_uuid'           => 'uuid',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_name'           => 'EntityName',
        'protokoll_entity_uuid' => 'ProtokollEntityUuid',
        'ausgabe_user'          => 'AusgabeUser',
        'bezeichnung'           => 'Bezeichnung',
        'execution_time'        => 'ExecutionTime',
        'object_uuid'           => 'ObjectUuid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_name'           => 'setEntityName',
        'protokoll_entity_uuid' => 'setProtokollEntityUuid',
        'ausgabe_user'          => 'setAusgabeUser',
        'bezeichnung'           => 'setBezeichnung',
        'execution_time'        => 'setExecutionTime',
        'object_uuid'           => 'setObjectUuid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_name'           => 'getEntityName',
        'protokoll_entity_uuid' => 'getProtokollEntityUuid',
        'ausgabe_user'          => 'getAusgabeUser',
        'bezeichnung'           => 'getBezeichnung',
        'execution_time'        => 'getExecutionTime',
        'object_uuid'           => 'getObjectUuid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_name'] = isset($data['entity_name']) ? $data['entity_name'] : null;
        $this->container['protokoll_entity_uuid'] = isset($data['protokoll_entity_uuid']) ? $data['protokoll_entity_uuid'] : null;
        $this->container['ausgabe_user'] = isset($data['ausgabe_user']) ? $data['ausgabe_user'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['execution_time'] = isset($data['execution_time']) ? $data['execution_time'] : null;
        $this->container['object_uuid'] = isset($data['object_uuid']) ? $data['object_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }

    /**
     * Gets entity_name
     *
     * @return string
     */
    public function getEntityName()
    {
        return $this->container['entity_name'];
    }

    /**
     * Sets entity_name
     *
     * @param string $entity_name Holt oder setzt den Namen der Entity (z.B. \"BewerbungAktion\").
     *
     * @return $this
     */
    public function setEntityName($entity_name)
    {
        $this->container['entity_name'] = $entity_name;

        return $this;
    }

    /**
     * Gets protokoll_entity_uuid
     *
     * @return string
     */
    public function getProtokollEntityUuid()
    {
        return $this->container['protokoll_entity_uuid'];
    }

    /**
     * Sets protokoll_entity_uuid
     *
     * @param string $protokoll_entity_uuid Holt oder setzt die UUID des Objekts zur Erstellung eines Protokolleintrags.
     *
     * @return $this
     */
    public function setProtokollEntityUuid($protokoll_entity_uuid)
    {
        $this->container['protokoll_entity_uuid'] = $protokoll_entity_uuid;

        return $this;
    }

    /**
     * Gets ausgabe_user
     *
     * @return string
     */
    public function getAusgabeUser()
    {
        return $this->container['ausgabe_user'];
    }

    /**
     * Sets ausgabe_user
     *
     * @param string $ausgabe_user Holt oder setzt den Fullname des AusgabeUser.
     *
     * @return $this
     */
    public function setAusgabeUser($ausgabe_user)
    {
        $this->container['ausgabe_user'] = $ausgabe_user;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Holt oder setzt die Bezeichnung.
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets execution_time
     *
     * @return \DateTime
     */
    public function getExecutionTime()
    {
        return $this->container['execution_time'];
    }

    /**
     * Sets execution_time
     *
     * @param \DateTime $execution_time Holt oder setzt die ExecutionTime.
     *
     * @return $this
     */
    public function setExecutionTime($execution_time)
    {
        $this->container['execution_time'] = $execution_time;

        return $this;
    }

    /**
     * Gets object_uuid
     *
     * @return string
     */
    public function getObjectUuid()
    {
        return $this->container['object_uuid'];
    }

    /**
     * Sets object_uuid
     *
     * @param string $object_uuid Die Object-Uuid
     *
     * @return $this
     */
    public function setObjectUuid($object_uuid)
    {
        $this->container['object_uuid'] = $object_uuid;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

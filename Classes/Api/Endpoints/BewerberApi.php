<?php
/**
 * BewerberApi
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Endpoints;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Prosoft\RecruitingApi\Api\ApiException;
use Prosoft\RecruitingApi\Api\Configuration;
use Prosoft\RecruitingApi\Api\HeaderSelector;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * BewerberApi Class Doc Comment
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BewerberApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiPublicV1BewerberGetByIdGet
     *
     * Holt die Daten eines Bewerbers.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in
     * prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key     x_api_key (optional)
     * @param string $bewerber_uuid Die Uuid des Bewerbers. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException                  on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Prosoft\RecruitingApi\Api\Dto\PublicBewerberReadOnlyDto
     */
    public function apiPublicV1BewerberGetByIdGet($x_api_key = null, $bewerber_uuid = null)
    {
        list($response) = $this->apiPublicV1BewerberGetByIdGetWithHttpInfo($x_api_key, $bewerber_uuid);
        return $response;
    }

    /**
     * Operation apiPublicV1BewerberGetByIdGetWithHttpInfo
     *
     * Holt die Daten eines Bewerbers.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in
     * prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key     (optional)
     * @param string $bewerber_uuid Die Uuid des Bewerbers. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                   of \Prosoft\RecruitingApi\Api\Dto\PublicBewerberReadOnlyDto, HTTP
     *                                                 status code, HTTP response headers (array of strings)
     */
    public function apiPublicV1BewerberGetByIdGetWithHttpInfo($x_api_key = null, $bewerber_uuid = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PublicBewerberReadOnlyDto';
        $request = $this->apiPublicV1BewerberGetByIdGetRequest($x_api_key, $bewerber_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\PublicBewerberReadOnlyDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1BewerberGetByIdGetAsync
     *
     * Holt die Daten eines Bewerbers.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in
     * prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key     (optional)
     * @param string $bewerber_uuid Die Uuid des Bewerbers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetByIdGetAsync($x_api_key = null, $bewerber_uuid = null)
    {
        return $this->apiPublicV1BewerberGetByIdGetAsyncWithHttpInfo($x_api_key, $bewerber_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1BewerberGetByIdGetAsyncWithHttpInfo
     *
     * Holt die Daten eines Bewerbers.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in
     * prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key     (optional)
     * @param string $bewerber_uuid Die Uuid des Bewerbers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetByIdGetAsyncWithHttpInfo($x_api_key = null, $bewerber_uuid = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PublicBewerberReadOnlyDto';
        $request = $this->apiPublicV1BewerberGetByIdGetRequest($x_api_key, $bewerber_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1BewerberGetByIdGet'
     *
     * @param string $x_api_key     (optional)
     * @param string $bewerber_uuid Die Uuid des Bewerbers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1BewerberGetByIdGetRequest($x_api_key = null, $bewerber_uuid = null)
    {
        $resourcePath = '/api/public/v1/Bewerber/GetById';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bewerber_uuid !== null) {
            $queryParams['bewerberUuid'] = ObjectSerializer::toQueryValue($bewerber_uuid);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['X-ApiKey'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ApiKey'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPublicV1BewerberGetBySearchTermGet
     *
     * Holt alle Bewerber, bzw. falls ein Suchterminus angegeben ist, alle die diesem entsprechen.  Header-Daten:
     * \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden
     * (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  x_api_key (optional)
     * @param string $searchterm Der Suchterminus. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException                                          on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicBewerberListeReadOnlyDto
     */
    public function apiPublicV1BewerberGetBySearchTermGet($x_api_key = null, $searchterm = null)
    {
        list($response) = $this->apiPublicV1BewerberGetBySearchTermGetWithHttpInfo($x_api_key, $searchterm);
        return $response;
    }

    /**
     * Operation apiPublicV1BewerberGetBySearchTermGetWithHttpInfo
     *
     * Holt alle Bewerber, bzw. falls ein Suchterminus angegeben ist, alle die diesem entsprechen.  Header-Daten:
     * \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden
     * (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  (optional)
     * @param string $searchterm Der Suchterminus. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                   of
     *                                                 \Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicBewerberListeReadOnlyDto,
     *                                                 HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPublicV1BewerberGetBySearchTermGetWithHttpInfo($x_api_key = null, $searchterm = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicBewerberListeReadOnlyDto';
        $request = $this->apiPublicV1BewerberGetBySearchTermGetRequest($x_api_key, $searchterm);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicBewerberListeReadOnlyDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1BewerberGetBySearchTermGetAsync
     *
     * Holt alle Bewerber, bzw. falls ein Suchterminus angegeben ist, alle die diesem entsprechen.  Header-Daten:
     * \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden
     * (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  (optional)
     * @param string $searchterm Der Suchterminus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetBySearchTermGetAsync($x_api_key = null, $searchterm = null)
    {
        return $this->apiPublicV1BewerberGetBySearchTermGetAsyncWithHttpInfo($x_api_key, $searchterm)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1BewerberGetBySearchTermGetAsyncWithHttpInfo
     *
     * Holt alle Bewerber, bzw. falls ein Suchterminus angegeben ist, alle die diesem entsprechen.  Header-Daten:
     * \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden
     * (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  (optional)
     * @param string $searchterm Der Suchterminus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetBySearchTermGetAsyncWithHttpInfo($x_api_key = null, $searchterm = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicBewerberListeReadOnlyDto';
        $request = $this->apiPublicV1BewerberGetBySearchTermGetRequest($x_api_key, $searchterm);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1BewerberGetBySearchTermGet'
     *
     * @param string $x_api_key  (optional)
     * @param string $searchterm Der Suchterminus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1BewerberGetBySearchTermGetRequest($x_api_key = null, $searchterm = null)
    {
        $resourcePath = '/api/public/v1/Bewerber/GetBySearchTerm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($searchterm !== null) {
            $queryParams['searchterm'] = ObjectSerializer::toQueryValue($searchterm);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['X-ApiKey'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ApiKey'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPublicV1BewerberGetDateiByIdGet
     *
     * Ermittelt die Datei eines Bewerbers anhand der Bewerberdatei-Uuid  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" -
     * der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  x_api_key (optional)
     * @param string $datei_uuid Die Uuid der Datei. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiPublicV1BewerberGetDateiByIdGet($x_api_key = null, $datei_uuid = null)
    {
        list($response) = $this->apiPublicV1BewerberGetDateiByIdGetWithHttpInfo($x_api_key, $datei_uuid);
        return $response;
    }

    /**
     * Operation apiPublicV1BewerberGetDateiByIdGetWithHttpInfo
     *
     * Ermittelt die Datei eines Bewerbers anhand der Bewerberdatei-Uuid  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" -
     * der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  (optional)
     * @param string $datei_uuid Die Uuid der Datei. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                   of string, HTTP status code, HTTP response headers (array of
     *                                                 strings)
     */
    public function apiPublicV1BewerberGetDateiByIdGetWithHttpInfo($x_api_key = null, $datei_uuid = null)
    {
        $returnType = 'string';
        $request = $this->apiPublicV1BewerberGetDateiByIdGetRequest($x_api_key, $datei_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1BewerberGetDateiByIdGetAsync
     *
     * Ermittelt die Datei eines Bewerbers anhand der Bewerberdatei-Uuid  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" -
     * der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  (optional)
     * @param string $datei_uuid Die Uuid der Datei. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetDateiByIdGetAsync($x_api_key = null, $datei_uuid = null)
    {
        return $this->apiPublicV1BewerberGetDateiByIdGetAsyncWithHttpInfo($x_api_key, $datei_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1BewerberGetDateiByIdGetAsyncWithHttpInfo
     *
     * Ermittelt die Datei eines Bewerbers anhand der Bewerberdatei-Uuid  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" -
     * der API-Key kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key  (optional)
     * @param string $datei_uuid Die Uuid der Datei. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetDateiByIdGetAsyncWithHttpInfo($x_api_key = null, $datei_uuid = null)
    {
        $returnType = 'string';
        $request = $this->apiPublicV1BewerberGetDateiByIdGetRequest($x_api_key, $datei_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1BewerberGetDateiByIdGet'
     *
     * @param string $x_api_key  (optional)
     * @param string $datei_uuid Die Uuid der Datei. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1BewerberGetDateiByIdGetRequest($x_api_key = null, $datei_uuid = null)
    {
        $resourcePath = '/api/public/v1/Bewerber/GetDateiById';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datei_uuid !== null) {
            $queryParams['dateiUuid'] = ObjectSerializer::toQueryValue($datei_uuid);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['X-ApiKey'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ApiKey'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPublicV1BewerberGetProfileAsPdfGet
     *
     * Holt den Inhalt eines gespeicherten Profils als PDF.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key
     * kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key    x_api_key (optional)
     * @param string $profile_uuid Die UUID des Bewerber-Profils. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiPublicV1BewerberGetProfileAsPdfGet($x_api_key = null, $profile_uuid = null)
    {
        list($response) = $this->apiPublicV1BewerberGetProfileAsPdfGetWithHttpInfo($x_api_key, $profile_uuid);
        return $response;
    }

    /**
     * Operation apiPublicV1BewerberGetProfileAsPdfGetWithHttpInfo
     *
     * Holt den Inhalt eines gespeicherten Profils als PDF.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key
     * kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key    (optional)
     * @param string $profile_uuid Die UUID des Bewerber-Profils. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                   of string, HTTP status code, HTTP response headers (array of
     *                                                 strings)
     */
    public function apiPublicV1BewerberGetProfileAsPdfGetWithHttpInfo($x_api_key = null, $profile_uuid = null)
    {
        $returnType = 'string';
        $request = $this->apiPublicV1BewerberGetProfileAsPdfGetRequest($x_api_key, $profile_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1BewerberGetProfileAsPdfGetAsync
     *
     * Holt den Inhalt eines gespeicherten Profils als PDF.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key
     * kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key    (optional)
     * @param string $profile_uuid Die UUID des Bewerber-Profils. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetProfileAsPdfGetAsync($x_api_key = null, $profile_uuid = null)
    {
        return $this->apiPublicV1BewerberGetProfileAsPdfGetAsyncWithHttpInfo($x_api_key, $profile_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1BewerberGetProfileAsPdfGetAsyncWithHttpInfo
     *
     * Holt den Inhalt eines gespeicherten Profils als PDF.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key
     * kann in prosoftrecruiting unter Einstellungen/API-Keys erstellt werden (Bereich: \"OpenBewerber\")
     *
     * @param string $x_api_key    (optional)
     * @param string $profile_uuid Die UUID des Bewerber-Profils. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1BewerberGetProfileAsPdfGetAsyncWithHttpInfo($x_api_key = null, $profile_uuid = null)
    {
        $returnType = 'string';
        $request = $this->apiPublicV1BewerberGetProfileAsPdfGetRequest($x_api_key, $profile_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1BewerberGetProfileAsPdfGet'
     *
     * @param string $x_api_key    (optional)
     * @param string $profile_uuid Die UUID des Bewerber-Profils. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1BewerberGetProfileAsPdfGetRequest($x_api_key = null, $profile_uuid = null)
    {
        $resourcePath = '/api/public/v1/Bewerber/GetProfileAsPdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile_uuid !== null) {
            $queryParams['profileUuid'] = ObjectSerializer::toQueryValue($profile_uuid);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['X-ApiKey'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ApiKey'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array             of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

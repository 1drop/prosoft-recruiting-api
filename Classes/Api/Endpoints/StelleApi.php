<?php
/**
 * StelleApi
 * PHP version 5
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * prosoftrecruiting API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.3
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Prosoft\RecruitingApi\Api\Endpoints;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Prosoft\RecruitingApi\Api\ApiException;
use Prosoft\RecruitingApi\Api\Configuration;
use Prosoft\RecruitingApi\Api\HeaderSelector;
use Prosoft\RecruitingApi\Api\ObjectSerializer;

/**
 * StelleApi Class Doc Comment
 *
 * @category Class
 * @package  Prosoft\RecruitingApi\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StelleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiPublicV1StelleCreatePost
     *
     * Erstellt eine Stelle.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter
     * Einstellungen/API-Keys erstellt werden (Bereich: \"OpenStelle\")  \"Content-Type\": \"multipart/form-data\"
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleNeuanlageDto $body      Das PublicStelleNeuanlageReadWriteDto.
     *                                                                          (optional)
     * @param string                                                 $x_api_key x_api_key (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiPublicV1StelleCreatePost($body = null, $x_api_key = null)
    {
        $this->apiPublicV1StelleCreatePostWithHttpInfo($body, $x_api_key);
    }

    /**
     * Operation apiPublicV1StelleCreatePostWithHttpInfo
     *
     * Erstellt eine Stelle.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter
     * Einstellungen/API-Keys erstellt werden (Bereich: \"OpenStelle\")  \"Content-Type\": \"multipart/form-data\"
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleNeuanlageDto $body      Das PublicStelleNeuanlageReadWriteDto.
     *                                                                          (optional)
     * @param string                                                 $x_api_key (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                  of null, HTTP status code, HTTP response headers (array of
     *                                                strings)
     */
    public function apiPublicV1StelleCreatePostWithHttpInfo($body = null, $x_api_key = null)
    {
        $returnType = '';
        $request = $this->apiPublicV1StelleCreatePostRequest($body, $x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1StelleCreatePostAsync
     *
     * Erstellt eine Stelle.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter
     * Einstellungen/API-Keys erstellt werden (Bereich: \"OpenStelle\")  \"Content-Type\": \"multipart/form-data\"
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleNeuanlageDto $body      Das PublicStelleNeuanlageReadWriteDto.
     *                                                                          (optional)
     * @param string                                                 $x_api_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleCreatePostAsync($body = null, $x_api_key = null)
    {
        return $this->apiPublicV1StelleCreatePostAsyncWithHttpInfo($body, $x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1StelleCreatePostAsyncWithHttpInfo
     *
     * Erstellt eine Stelle.  Header-Daten:  \"X-ApiKey\": \"ihrapikey\" - der API-Key kann in prosoftrecruiting unter
     * Einstellungen/API-Keys erstellt werden (Bereich: \"OpenStelle\")  \"Content-Type\": \"multipart/form-data\"
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleNeuanlageDto $body      Das PublicStelleNeuanlageReadWriteDto.
     *                                                                          (optional)
     * @param string                                                 $x_api_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleCreatePostAsyncWithHttpInfo($body = null, $x_api_key = null)
    {
        $returnType = '';
        $request = $this->apiPublicV1StelleCreatePostRequest($body, $x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1StelleCreatePost'
     *
     * @param \Prosoft\RecruitingApi\Api\Dto\PublicStelleNeuanlageDto $body      Das PublicStelleNeuanlageReadWriteDto.
     *                                                                          (optional)
     * @param string                                                 $x_api_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1StelleCreatePostRequest($body = null, $x_api_key = null)
    {
        $resourcePath = '/api/public/v1/Stelle/Create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-ApiKey'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ApiKey'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPublicV1StelleGetStelleByIdGet
     *
     * Holt eine Stelle.
     *
     * @param string $stelle_uuid Die Uuid der Stelle. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException                on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Prosoft\RecruitingApi\Api\Dto\PublicStelleReadOnlyDto
     */
    public function apiPublicV1StelleGetStelleByIdGet($stelle_uuid = null)
    {
        list($response) = $this->apiPublicV1StelleGetStelleByIdGetWithHttpInfo($stelle_uuid);
        return $response;
    }

    /**
     * Operation apiPublicV1StelleGetStelleByIdGetWithHttpInfo
     *
     * Holt eine Stelle.
     *
     * @param string $stelle_uuid Die Uuid der Stelle. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                  of \Prosoft\RecruitingApi\Api\Dto\PublicStelleReadOnlyDto, HTTP
     *                                                status code, HTTP response headers (array of strings)
     */
    public function apiPublicV1StelleGetStelleByIdGetWithHttpInfo($stelle_uuid = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PublicStelleReadOnlyDto';
        $request = $this->apiPublicV1StelleGetStelleByIdGetRequest($stelle_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\PublicStelleReadOnlyDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\ApiErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1StelleGetStelleByIdGetAsync
     *
     * Holt eine Stelle.
     *
     * @param string $stelle_uuid Die Uuid der Stelle. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleGetStelleByIdGetAsync($stelle_uuid = null)
    {
        return $this->apiPublicV1StelleGetStelleByIdGetAsyncWithHttpInfo($stelle_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1StelleGetStelleByIdGetAsyncWithHttpInfo
     *
     * Holt eine Stelle.
     *
     * @param string $stelle_uuid Die Uuid der Stelle. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleGetStelleByIdGetAsyncWithHttpInfo($stelle_uuid = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PublicStelleReadOnlyDto';
        $request = $this->apiPublicV1StelleGetStelleByIdGetRequest($stelle_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1StelleGetStelleByIdGet'
     *
     * @param string $stelle_uuid Die Uuid der Stelle. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1StelleGetStelleByIdGetRequest($stelle_uuid = null)
    {
        $resourcePath = '/api/public/v1/Stelle/GetStelleById';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($stelle_uuid !== null) {
            $queryParams['stelleUuid'] = ObjectSerializer::toQueryValue($stelle_uuid);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPublicV1StelleGetStellenFilteredGet
     *
     * Holt alle Stellen
     *
     * @param string $keywords             Die Suchbegriffe, für die die Stellen geladen werden sollen (optional)
     * @param int    $page_no              Die Seitennummer (optional)
     * @param int    $page_size            Die Anzahl Records pro Seite (optional)
     * @param float  $lat                  Die geografische Breite (Latitude) des Standorts (optional)
     * @param float  $lon                  Die geografische Länge (Longitude) des Standorts (optional)
     * @param int    $radius               Der Radius des Umkreises in km (optional)
     * @param string $abt_uuids            Die Uuids der Unternehmensbereiche/Abteilungen (optional)
     * @param string $va_uuids             Die Uuids der Vertragsarten (optional)
     * @param string $boerse               Der URL-Slug der Stellenbörse (optional)
     * @param bool   $generate_coordinates Gibt an, ob für jede Stelle die Koordinaten des Standortes generiert werden
     *                                     sollen (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException                                        on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto
     */
    public function apiPublicV1StelleGetStellenFilteredGet(
        $keywords = null,
        $page_no = null,
        $page_size = null,
        $lat = null,
        $lon = null,
        $radius = null,
        $abt_uuids = null,
        $va_uuids = null,
        $boerse = null,
        $generate_coordinates = null
    ) {
        list($response) = $this->apiPublicV1StelleGetStellenFilteredGetWithHttpInfo(
            $keywords,
            $page_no,
            $page_size,
            $lat,
            $lon,
            $radius,
            $abt_uuids,
            $va_uuids,
            $boerse,
            $generate_coordinates
        );
        return $response;
    }

    /**
     * Operation apiPublicV1StelleGetStellenFilteredGetWithHttpInfo
     *
     * Holt alle Stellen
     *
     * @param string $keywords             Die Suchbegriffe, für die die Stellen geladen werden sollen (optional)
     * @param int    $page_no              Die Seitennummer (optional)
     * @param int    $page_size            Die Anzahl Records pro Seite (optional)
     * @param float  $lat                  Die geografische Breite (Latitude) des Standorts (optional)
     * @param float  $lon                  Die geografische Länge (Longitude) des Standorts (optional)
     * @param int    $radius               Der Radius des Umkreises in km (optional)
     * @param string $abt_uuids            Die Uuids der Unternehmensbereiche/Abteilungen (optional)
     * @param string $va_uuids             Die Uuids der Vertragsarten (optional)
     * @param string $boerse               Der URL-Slug der Stellenbörse (optional)
     * @param bool   $generate_coordinates Gibt an, ob für jede Stelle die Koordinaten des Standortes generiert werden
     *                                     sollen (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                  of
     *                                                \Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto,
     *                                                HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPublicV1StelleGetStellenFilteredGetWithHttpInfo(
        $keywords = null,
        $page_no = null,
        $page_size = null,
        $lat = null,
        $lon = null,
        $radius = null,
        $abt_uuids = null,
        $va_uuids = null,
        $boerse = null,
        $generate_coordinates = null
    ) {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto';
        $request = $this->apiPublicV1StelleGetStellenFilteredGetRequest(
            $keywords,
            $page_no,
            $page_size,
            $lat,
            $lon,
            $radius,
            $abt_uuids,
            $va_uuids,
            $boerse,
            $generate_coordinates
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1StelleGetStellenFilteredGetAsync
     *
     * Holt alle Stellen
     *
     * @param string $keywords             Die Suchbegriffe, für die die Stellen geladen werden sollen (optional)
     * @param int    $page_no              Die Seitennummer (optional)
     * @param int    $page_size            Die Anzahl Records pro Seite (optional)
     * @param float  $lat                  Die geografische Breite (Latitude) des Standorts (optional)
     * @param float  $lon                  Die geografische Länge (Longitude) des Standorts (optional)
     * @param int    $radius               Der Radius des Umkreises in km (optional)
     * @param string $abt_uuids            Die Uuids der Unternehmensbereiche/Abteilungen (optional)
     * @param string $va_uuids             Die Uuids der Vertragsarten (optional)
     * @param string $boerse               Der URL-Slug der Stellenbörse (optional)
     * @param bool   $generate_coordinates Gibt an, ob für jede Stelle die Koordinaten des Standortes generiert werden
     *                                     sollen (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleGetStellenFilteredGetAsync(
        $keywords = null,
        $page_no = null,
        $page_size = null,
        $lat = null,
        $lon = null,
        $radius = null,
        $abt_uuids = null,
        $va_uuids = null,
        $boerse = null,
        $generate_coordinates = null
    ) {
        return $this->apiPublicV1StelleGetStellenFilteredGetAsyncWithHttpInfo(
            $keywords,
            $page_no,
            $page_size,
            $lat,
            $lon,
            $radius,
            $abt_uuids,
            $va_uuids,
            $boerse,
            $generate_coordinates
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1StelleGetStellenFilteredGetAsyncWithHttpInfo
     *
     * Holt alle Stellen
     *
     * @param string $keywords             Die Suchbegriffe, für die die Stellen geladen werden sollen (optional)
     * @param int    $page_no              Die Seitennummer (optional)
     * @param int    $page_size            Die Anzahl Records pro Seite (optional)
     * @param float  $lat                  Die geografische Breite (Latitude) des Standorts (optional)
     * @param float  $lon                  Die geografische Länge (Longitude) des Standorts (optional)
     * @param int    $radius               Der Radius des Umkreises in km (optional)
     * @param string $abt_uuids            Die Uuids der Unternehmensbereiche/Abteilungen (optional)
     * @param string $va_uuids             Die Uuids der Vertragsarten (optional)
     * @param string $boerse               Der URL-Slug der Stellenbörse (optional)
     * @param bool   $generate_coordinates Gibt an, ob für jede Stelle die Koordinaten des Standortes generiert werden
     *                                     sollen (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleGetStellenFilteredGetAsyncWithHttpInfo(
        $keywords = null,
        $page_no = null,
        $page_size = null,
        $lat = null,
        $lon = null,
        $radius = null,
        $abt_uuids = null,
        $va_uuids = null,
        $boerse = null,
        $generate_coordinates = null
    ) {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto';
        $request = $this->apiPublicV1StelleGetStellenFilteredGetRequest(
            $keywords,
            $page_no,
            $page_size,
            $lat,
            $lon,
            $radius,
            $abt_uuids,
            $va_uuids,
            $boerse,
            $generate_coordinates
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1StelleGetStellenFilteredGet'
     *
     * @param string $keywords             Die Suchbegriffe, für die die Stellen geladen werden sollen (optional)
     * @param int    $page_no              Die Seitennummer (optional)
     * @param int    $page_size            Die Anzahl Records pro Seite (optional)
     * @param float  $lat                  Die geografische Breite (Latitude) des Standorts (optional)
     * @param float  $lon                  Die geografische Länge (Longitude) des Standorts (optional)
     * @param int    $radius               Der Radius des Umkreises in km (optional)
     * @param string $abt_uuids            Die Uuids der Unternehmensbereiche/Abteilungen (optional)
     * @param string $va_uuids             Die Uuids der Vertragsarten (optional)
     * @param string $boerse               Der URL-Slug der Stellenbörse (optional)
     * @param bool   $generate_coordinates Gibt an, ob für jede Stelle die Koordinaten des Standortes generiert werden
     *                                     sollen (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1StelleGetStellenFilteredGetRequest(
        $keywords = null,
        $page_no = null,
        $page_size = null,
        $lat = null,
        $lon = null,
        $radius = null,
        $abt_uuids = null,
        $va_uuids = null,
        $boerse = null,
        $generate_coordinates = null
    ) {
        $resourcePath = '/api/public/v1/Stelle/GetStellenFiltered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keywords !== null) {
            $queryParams['keywords'] = ObjectSerializer::toQueryValue($keywords);
        }
        // query params
        if ($page_no !== null) {
            $queryParams['pageNo'] = ObjectSerializer::toQueryValue($page_no);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($lat !== null) {
            $queryParams['lat'] = ObjectSerializer::toQueryValue($lat);
        }
        // query params
        if ($lon !== null) {
            $queryParams['lon'] = ObjectSerializer::toQueryValue($lon);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = ObjectSerializer::toQueryValue($radius);
        }
        // query params
        if ($abt_uuids !== null) {
            $queryParams['abtUuids'] = ObjectSerializer::toQueryValue($abt_uuids);
        }
        // query params
        if ($va_uuids !== null) {
            $queryParams['vaUuids'] = ObjectSerializer::toQueryValue($va_uuids);
        }
        // query params
        if ($boerse !== null) {
            $queryParams['boerse'] = ObjectSerializer::toQueryValue($boerse);
        }
        // query params
        if ($generate_coordinates !== null) {
            $queryParams['generateCoordinates'] = ObjectSerializer::toQueryValue($generate_coordinates);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPublicV1StelleGetStellenGet
     *
     * Holt alle aktuell veröffentlichten Stellen.
     *
     * @param string $searchterm Der Suchterminus. (optional)
     * @param string $boerse     Slug der Stellenboerse, nach der gefiltert werden soll. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException                                        on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto
     */
    public function apiPublicV1StelleGetStellenGet($searchterm = null, $boerse = null)
    {
        list($response) = $this->apiPublicV1StelleGetStellenGetWithHttpInfo($searchterm, $boerse);
        return $response;
    }

    /**
     * Operation apiPublicV1StelleGetStellenGetWithHttpInfo
     *
     * Holt alle aktuell veröffentlichten Stellen.
     *
     * @param string $searchterm Der Suchterminus. (optional)
     * @param string $boerse     Slug der Stellenboerse, nach der gefiltert werden soll. (optional)
     *
     * @throws \Prosoft\RecruitingApi\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array                                  of
     *                                                \Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto,
     *                                                HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPublicV1StelleGetStellenGetWithHttpInfo($searchterm = null, $boerse = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto';
        $request = $this->apiPublicV1StelleGetStellenGetRequest($searchterm, $boerse);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPublicV1StelleGetStellenGetAsync
     *
     * Holt alle aktuell veröffentlichten Stellen.
     *
     * @param string $searchterm Der Suchterminus. (optional)
     * @param string $boerse     Slug der Stellenboerse, nach der gefiltert werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleGetStellenGetAsync($searchterm = null, $boerse = null)
    {
        return $this->apiPublicV1StelleGetStellenGetAsyncWithHttpInfo($searchterm, $boerse)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPublicV1StelleGetStellenGetAsyncWithHttpInfo
     *
     * Holt alle aktuell veröffentlichten Stellen.
     *
     * @param string $searchterm Der Suchterminus. (optional)
     * @param string $boerse     Slug der Stellenboerse, nach der gefiltert werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPublicV1StelleGetStellenGetAsyncWithHttpInfo($searchterm = null, $boerse = null)
    {
        $returnType = '\Prosoft\RecruitingApi\Api\Dto\PaginationResultDtoPublicStelleListeReadOnlyDto';
        $request = $this->apiPublicV1StelleGetStellenGetRequest($searchterm, $boerse);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPublicV1StelleGetStellenGet'
     *
     * @param string $searchterm Der Suchterminus. (optional)
     * @param string $boerse     Slug der Stellenboerse, nach der gefiltert werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiPublicV1StelleGetStellenGetRequest($searchterm = null, $boerse = null)
    {
        $resourcePath = '/api/public/v1/Stelle/GetStellen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($searchterm !== null) {
            $queryParams['searchterm'] = ObjectSerializer::toQueryValue($searchterm);
        }
        // query params
        if ($boerse !== null) {
            $queryParams['boerse'] = ObjectSerializer::toQueryValue($boerse);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array             of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
